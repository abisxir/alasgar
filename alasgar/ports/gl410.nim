#[
    OpenGL loader generated by glad 0.1.36 on Sat May 13 13:59:59 2023.

    Language/Generator: Nim
    Specification: gl
    APIs: gl=4.1
    Profile: core
    Extensions:
        GL_ARB_shading_language_420pack
    Loader: True
    Local files: False
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --profile="core" --api="gl=4.1" --generator="nim" --spec="gl" --extensions="GL_ARB_shading_language_420pack"
    Online:
        https://glad.dav1d.de/#profile=core&language=nim&specification=gl&loader=on&api=gl%3D4.1&extensions=GL_ARB_shading_language_420pack
]#

import strutils

var glVersionMajor, glVersionMinor: int

# Types
type
  ClContext* = distinct pointer
  ClEvent* = distinct pointer
  GLVULKANPROCNV* = pointer
  GLbitfield* = distinct uint32
  GLboolean* = bool
  GLbyte* = int8
  GLchar* = char
  GLcharARB* = char
  GLclampd* = float64
  GLclampf* = float32
  GLclampx* = int32
  GLdouble* = float64
  GLeglClientBufferEXT* = pointer
  GLeglImageOES* = distinct pointer
  GLenum* = distinct uint32
  GLfixed* = int32
  GLfloat* = float32
  GLhalf* = uint16
  GLhalfARB* = uint16
  GLhalfNV* = uint16
  GLhandleARB* = uint32
  GLint* = int32
  GLint64* = int64
  GLint64EXT* = int64
  GLintptr* = cint
  GLintptrARB* = cint
  GLshort* = int16
  GLsizei* = int32
  GLsizeiptr* = cint
  GLsizeiptrARB* = cint
  GLsync* = distinct pointer
  GLubyte* = uint8
  GLuint* = uint32
  GLuint64* = uint64
  GLuint64EXT* = uint64
  GLushort* = uint16
  GLvdpauSurfaceNV* = int32
  GLvoid* = pointer

  GLdebugProc* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcArb* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcAmd* = proc (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcKhr* = proc (
    source, typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}


# Enums

proc `==`*(a, b: GLenum): bool {.borrow.}
proc `==`*(a, b: GLbitfield): bool {.borrow.}
proc `or`*(a, b: GLbitfield): GLbitfield {.borrow.}
proc hash*(x: GLenum): int = x.int

const
  GL_FALSE* = 0
  GL_INVALID_INDEX* = 0xFFFFFFFF'u32
  GL_NONE* = 0
  GL_NONE_OES* = 0
  GL_NO_ERROR* = 0
  GL_ONE* = 1
  GL_TIMEOUT_IGNORED* = 0xFFFFFFFFFFFFFFFF'u64
  GL_TIMEOUT_IGNORED_APPLE* = 0xFFFFFFFFFFFFFFFF'u64
  GL_TRUE* = 1
  GL_VERSION_ES_CL_1_0* = 1
  GL_VERSION_ES_CL_1_1* = 1
  GL_VERSION_ES_CM_1_1* = 1
  GL_ZERO* = 0

  GL_DEPTH_BUFFER_BIT* = 0x00000100.GLbitfield
  GL_STENCIL_BUFFER_BIT* = 0x00000400.GLbitfield
  GL_COLOR_BUFFER_BIT* = 0x00004000.GLbitfield
  GL_POINTS* = 0x0000.GLenum
  GL_LINES* = 0x0001.GLenum
  GL_LINE_LOOP* = 0x0002.GLenum
  GL_LINE_STRIP* = 0x0003.GLenum
  GL_TRIANGLES* = 0x0004.GLenum
  GL_TRIANGLE_STRIP* = 0x0005.GLenum
  GL_TRIANGLE_FAN* = 0x0006.GLenum
  GL_NEVER* = 0x0200.GLenum
  GL_LESS* = 0x0201.GLenum
  GL_EQUAL* = 0x0202.GLenum
  GL_LEQUAL* = 0x0203.GLenum
  GL_GREATER* = 0x0204.GLenum
  GL_NOTEQUAL* = 0x0205.GLenum
  GL_GEQUAL* = 0x0206.GLenum
  GL_ALWAYS* = 0x0207.GLenum
  GL_SRC_COLOR* = 0x0300.GLenum
  GL_ONE_MINUS_SRC_COLOR* = 0x0301.GLenum
  GL_SRC_ALPHA* = 0x0302.GLenum
  GL_ONE_MINUS_SRC_ALPHA* = 0x0303.GLenum
  GL_DST_ALPHA* = 0x0304.GLenum
  GL_ONE_MINUS_DST_ALPHA* = 0x0305.GLenum
  GL_DST_COLOR* = 0x0306.GLenum
  GL_ONE_MINUS_DST_COLOR* = 0x0307.GLenum
  GL_SRC_ALPHA_SATURATE* = 0x0308.GLenum
  GL_FRONT_LEFT* = 0x0400.GLenum
  GL_FRONT_RIGHT* = 0x0401.GLenum
  GL_BACK_LEFT* = 0x0402.GLenum
  GL_BACK_RIGHT* = 0x0403.GLenum
  GL_FRONT* = 0x0404.GLenum
  GL_BACK* = 0x0405.GLenum
  GL_LEFT* = 0x0406.GLenum
  GL_RIGHT* = 0x0407.GLenum
  GL_FRONT_AND_BACK* = 0x0408.GLenum
  GL_INVALID_ENUM* = 0x0500.GLenum
  GL_INVALID_VALUE* = 0x0501.GLenum
  GL_INVALID_OPERATION* = 0x0502.GLenum
  GL_OUT_OF_MEMORY* = 0x0505.GLenum
  GL_CW* = 0x0900.GLenum
  GL_CCW* = 0x0901.GLenum
  GL_POINT_SIZE* = 0x0B11.GLenum
  GL_POINT_SIZE_RANGE* = 0x0B12.GLenum
  GL_POINT_SIZE_GRANULARITY* = 0x0B13.GLenum
  GL_LINE_SMOOTH* = 0x0B20.GLenum
  GL_LINE_WIDTH* = 0x0B21.GLenum
  GL_LINE_WIDTH_RANGE* = 0x0B22.GLenum
  GL_LINE_WIDTH_GRANULARITY* = 0x0B23.GLenum
  GL_POLYGON_MODE* = 0x0B40.GLenum
  GL_POLYGON_SMOOTH* = 0x0B41.GLenum
  GL_CULL_FACE* = 0x0B44.GLenum
  GL_CULL_FACE_MODE* = 0x0B45.GLenum
  GL_FRONT_FACE* = 0x0B46.GLenum
  GL_DEPTH_RANGE* = 0x0B70.GLenum
  GL_DEPTH_TEST* = 0x0B71.GLenum
  GL_DEPTH_WRITEMASK* = 0x0B72.GLenum
  GL_DEPTH_CLEAR_VALUE* = 0x0B73.GLenum
  GL_DEPTH_FUNC* = 0x0B74.GLenum
  GL_STENCIL_TEST* = 0x0B90.GLenum
  GL_STENCIL_CLEAR_VALUE* = 0x0B91.GLenum
  GL_STENCIL_FUNC* = 0x0B92.GLenum
  GL_STENCIL_VALUE_MASK* = 0x0B93.GLenum
  GL_STENCIL_FAIL* = 0x0B94.GLenum
  GL_STENCIL_PASS_DEPTH_FAIL* = 0x0B95.GLenum
  GL_STENCIL_PASS_DEPTH_PASS* = 0x0B96.GLenum
  GL_STENCIL_REF* = 0x0B97.GLenum
  GL_STENCIL_WRITEMASK* = 0x0B98.GLenum
  GL_VIEWPORT* = 0x0BA2.GLenum
  GL_DITHER* = 0x0BD0.GLenum
  GL_BLEND_DST* = 0x0BE0.GLenum
  GL_BLEND_SRC* = 0x0BE1.GLenum
  GL_BLEND* = 0x0BE2.GLenum
  GL_LOGIC_OP_MODE* = 0x0BF0.GLenum
  GL_DRAW_BUFFER* = 0x0C01.GLenum
  GL_READ_BUFFER* = 0x0C02.GLenum
  GL_SCISSOR_BOX* = 0x0C10.GLenum
  GL_SCISSOR_TEST* = 0x0C11.GLenum
  GL_COLOR_CLEAR_VALUE* = 0x0C22.GLenum
  GL_COLOR_WRITEMASK* = 0x0C23.GLenum
  GL_DOUBLEBUFFER* = 0x0C32.GLenum
  GL_STEREO* = 0x0C33.GLenum
  GL_LINE_SMOOTH_HINT* = 0x0C52.GLenum
  GL_POLYGON_SMOOTH_HINT* = 0x0C53.GLenum
  GL_UNPACK_SWAP_BYTES* = 0x0CF0.GLenum
  GL_UNPACK_LSB_FIRST* = 0x0CF1.GLenum
  GL_UNPACK_ROW_LENGTH* = 0x0CF2.GLenum
  GL_UNPACK_SKIP_ROWS* = 0x0CF3.GLenum
  GL_UNPACK_SKIP_PIXELS* = 0x0CF4.GLenum
  GL_UNPACK_ALIGNMENT* = 0x0CF5.GLenum
  GL_PACK_SWAP_BYTES* = 0x0D00.GLenum
  GL_PACK_LSB_FIRST* = 0x0D01.GLenum
  GL_PACK_ROW_LENGTH* = 0x0D02.GLenum
  GL_PACK_SKIP_ROWS* = 0x0D03.GLenum
  GL_PACK_SKIP_PIXELS* = 0x0D04.GLenum
  GL_PACK_ALIGNMENT* = 0x0D05.GLenum
  GL_MAX_TEXTURE_SIZE* = 0x0D33.GLenum
  GL_MAX_VIEWPORT_DIMS* = 0x0D3A.GLenum
  GL_SUBPIXEL_BITS* = 0x0D50.GLbitfield
  GL_TEXTURE_1D* = 0x0DE0.GLenum
  GL_TEXTURE_2D* = 0x0DE1.GLenum
  GL_TEXTURE_WIDTH* = 0x1000.GLenum
  GL_TEXTURE_HEIGHT* = 0x1001.GLenum
  GL_TEXTURE_BORDER_COLOR* = 0x1004.GLenum
  GL_DONT_CARE* = 0x1100.GLenum
  GL_FASTEST* = 0x1101.GLenum
  GL_NICEST* = 0x1102.GLenum
  cGL_BYTE* = 0x1400.GLenum
  GL_UNSIGNED_BYTE* = 0x1401.GLenum
  cGL_SHORT* = 0x1402.GLenum
  GL_UNSIGNED_SHORT* = 0x1403.GLenum
  cGL_INT* = 0x1404.GLenum
  GL_UNSIGNED_INT* = 0x1405.GLenum
  cGL_FLOAT* = 0x1406.GLenum
  GL_CLEAR* = 0x1500.GLenum
  GL_AND* = 0x1501.GLenum
  GL_AND_REVERSE* = 0x1502.GLenum
  GL_COPY* = 0x1503.GLenum
  GL_AND_INVERTED* = 0x1504.GLenum
  GL_NOOP* = 0x1505.GLenum
  GL_XOR* = 0x1506.GLenum
  GL_OR* = 0x1507.GLenum
  GL_NOR* = 0x1508.GLenum
  GL_EQUIV* = 0x1509.GLenum
  GL_INVERT* = 0x150A.GLenum
  GL_OR_REVERSE* = 0x150B.GLenum
  GL_COPY_INVERTED* = 0x150C.GLenum
  GL_OR_INVERTED* = 0x150D.GLenum
  GL_NAND* = 0x150E.GLenum
  GL_SET* = 0x150F.GLenum
  GL_TEXTURE* = 0x1702.GLenum
  GL_COLOR* = 0x1800.GLenum
  GL_DEPTH* = 0x1801.GLenum
  GL_STENCIL* = 0x1802.GLenum
  GL_STENCIL_INDEX* = 0x1901.GLenum
  GL_DEPTH_COMPONENT* = 0x1902.GLenum
  GL_RED* = 0x1903.GLenum
  GL_GREEN* = 0x1904.GLenum
  GL_BLUE* = 0x1905.GLenum
  GL_ALPHA* = 0x1906.GLenum
  GL_RGB* = 0x1907.GLenum
  GL_RGBA* = 0x1908.GLenum
  GL_POINT* = 0x1B00.GLenum
  GL_LINE* = 0x1B01.GLenum
  GL_FILL* = 0x1B02.GLenum
  GL_KEEP* = 0x1E00.GLenum
  GL_REPLACE* = 0x1E01.GLenum
  GL_INCR* = 0x1E02.GLenum
  GL_DECR* = 0x1E03.GLenum
  GL_VENDOR* = 0x1F00.GLenum
  GL_RENDERER* = 0x1F01.GLenum
  GL_VERSION* = 0x1F02.GLenum
  GL_EXTENSIONS* = 0x1F03.GLenum
  GL_NEAREST* = 0x2600.GLenum
  GL_LINEAR* = 0x2601.GLenum
  GL_NEAREST_MIPMAP_NEAREST* = 0x2700.GLenum
  GL_LINEAR_MIPMAP_NEAREST* = 0x2701.GLenum
  GL_NEAREST_MIPMAP_LINEAR* = 0x2702.GLenum
  GL_LINEAR_MIPMAP_LINEAR* = 0x2703.GLenum
  GL_TEXTURE_MAG_FILTER* = 0x2800.GLenum
  GL_TEXTURE_MIN_FILTER* = 0x2801.GLenum
  GL_TEXTURE_WRAP_S* = 0x2802.GLenum
  GL_TEXTURE_WRAP_T* = 0x2803.GLenum
  GL_REPEAT* = 0x2901.GLenum
  GL_COLOR_LOGIC_OP* = 0x0BF2.GLenum
  GL_POLYGON_OFFSET_UNITS* = 0x2A00.GLenum
  GL_POLYGON_OFFSET_POINT* = 0x2A01.GLenum
  GL_POLYGON_OFFSET_LINE* = 0x2A02.GLenum
  GL_POLYGON_OFFSET_FILL* = 0x8037.GLenum
  GL_POLYGON_OFFSET_FACTOR* = 0x8038.GLenum
  GL_TEXTURE_BINDING_1D* = 0x8068.GLenum
  GL_TEXTURE_BINDING_2D* = 0x8069.GLenum
  GL_TEXTURE_INTERNAL_FORMAT* = 0x1003.GLenum
  GL_TEXTURE_RED_SIZE* = 0x805C.GLenum
  GL_TEXTURE_GREEN_SIZE* = 0x805D.GLenum
  GL_TEXTURE_BLUE_SIZE* = 0x805E.GLenum
  GL_TEXTURE_ALPHA_SIZE* = 0x805F.GLenum
  cGL_DOUBLE* = 0x140A.GLenum
  GL_PROXY_TEXTURE_1D* = 0x8063.GLenum
  GL_PROXY_TEXTURE_2D* = 0x8064.GLenum
  GL_R3_G3_B2* = 0x2A10.GLenum
  GL_RGB4* = 0x804F.GLenum
  GL_RGB5* = 0x8050.GLenum
  GL_RGB8* = 0x8051.GLenum
  GL_RGB10* = 0x8052.GLenum
  GL_RGB12* = 0x8053.GLenum
  GL_RGB16* = 0x8054.GLenum
  GL_RGBA2* = 0x8055.GLenum
  GL_RGBA4* = 0x8056.GLenum
  GL_RGB5_A1* = 0x8057.GLenum
  GL_RGBA8* = 0x8058.GLenum
  GL_RGB10_A2* = 0x8059.GLenum
  GL_RGBA12* = 0x805A.GLenum
  GL_RGBA16* = 0x805B.GLenum
  GL_UNSIGNED_BYTE_3_3_2* = 0x8032.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4* = 0x8033.GLenum
  GL_UNSIGNED_SHORT_5_5_5_1* = 0x8034.GLenum
  GL_UNSIGNED_INT_8_8_8_8* = 0x8035.GLenum
  GL_UNSIGNED_INT_10_10_10_2* = 0x8036.GLenum
  GL_TEXTURE_BINDING_3D* = 0x806A.GLenum
  GL_PACK_SKIP_IMAGES* = 0x806B.GLenum
  GL_PACK_IMAGE_HEIGHT* = 0x806C.GLenum
  GL_UNPACK_SKIP_IMAGES* = 0x806D.GLenum
  GL_UNPACK_IMAGE_HEIGHT* = 0x806E.GLenum
  GL_TEXTURE_3D* = 0x806F.GLenum
  GL_PROXY_TEXTURE_3D* = 0x8070.GLenum
  GL_TEXTURE_DEPTH* = 0x8071.GLenum
  GL_TEXTURE_WRAP_R* = 0x8072.GLenum
  GL_MAX_3D_TEXTURE_SIZE* = 0x8073.GLenum
  GL_UNSIGNED_BYTE_2_3_3_REV* = 0x8362.GLenum
  GL_UNSIGNED_SHORT_5_6_5* = 0x8363.GLenum
  GL_UNSIGNED_SHORT_5_6_5_REV* = 0x8364.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4_REV* = 0x8365.GLenum
  GL_UNSIGNED_SHORT_1_5_5_5_REV* = 0x8366.GLenum
  GL_UNSIGNED_INT_8_8_8_8_REV* = 0x8367.GLenum
  GL_UNSIGNED_INT_2_10_10_10_REV* = 0x8368.GLenum
  GL_BGR* = 0x80E0.GLenum
  GL_BGRA* = 0x80E1.GLenum
  GL_MAX_ELEMENTS_VERTICES* = 0x80E8.GLenum
  GL_MAX_ELEMENTS_INDICES* = 0x80E9.GLenum
  GL_CLAMP_TO_EDGE* = 0x812F.GLenum
  GL_TEXTURE_MIN_LOD* = 0x813A.GLenum
  GL_TEXTURE_MAX_LOD* = 0x813B.GLenum
  GL_TEXTURE_BASE_LEVEL* = 0x813C.GLenum
  GL_TEXTURE_MAX_LEVEL* = 0x813D.GLenum
  GL_SMOOTH_POINT_SIZE_RANGE* = 0x0B12.GLenum
  GL_SMOOTH_POINT_SIZE_GRANULARITY* = 0x0B13.GLenum
  GL_SMOOTH_LINE_WIDTH_RANGE* = 0x0B22.GLenum
  GL_SMOOTH_LINE_WIDTH_GRANULARITY* = 0x0B23.GLenum
  GL_ALIASED_LINE_WIDTH_RANGE* = 0x846E.GLenum
  GL_TEXTURE0* = 0x84C0.GLenum
  GL_TEXTURE1* = 0x84C1.GLenum
  GL_TEXTURE2* = 0x84C2.GLenum
  GL_TEXTURE3* = 0x84C3.GLenum
  GL_TEXTURE4* = 0x84C4.GLenum
  GL_TEXTURE5* = 0x84C5.GLenum
  GL_TEXTURE6* = 0x84C6.GLenum
  GL_TEXTURE7* = 0x84C7.GLenum
  GL_TEXTURE8* = 0x84C8.GLenum
  GL_TEXTURE9* = 0x84C9.GLenum
  GL_TEXTURE10* = 0x84CA.GLenum
  GL_TEXTURE11* = 0x84CB.GLenum
  GL_TEXTURE12* = 0x84CC.GLenum
  GL_TEXTURE13* = 0x84CD.GLenum
  GL_TEXTURE14* = 0x84CE.GLenum
  GL_TEXTURE15* = 0x84CF.GLenum
  GL_TEXTURE16* = 0x84D0.GLenum
  GL_TEXTURE17* = 0x84D1.GLenum
  GL_TEXTURE18* = 0x84D2.GLenum
  GL_TEXTURE19* = 0x84D3.GLenum
  GL_TEXTURE20* = 0x84D4.GLenum
  GL_TEXTURE21* = 0x84D5.GLenum
  GL_TEXTURE22* = 0x84D6.GLenum
  GL_TEXTURE23* = 0x84D7.GLenum
  GL_TEXTURE24* = 0x84D8.GLenum
  GL_TEXTURE25* = 0x84D9.GLenum
  GL_TEXTURE26* = 0x84DA.GLenum
  GL_TEXTURE27* = 0x84DB.GLenum
  GL_TEXTURE28* = 0x84DC.GLenum
  GL_TEXTURE29* = 0x84DD.GLenum
  GL_TEXTURE30* = 0x84DE.GLenum
  GL_TEXTURE31* = 0x84DF.GLenum
  GL_ACTIVE_TEXTURE* = 0x84E0.GLenum
  GL_MULTISAMPLE* = 0x809D.GLenum
  GL_SAMPLE_ALPHA_TO_COVERAGE* = 0x809E.GLenum
  GL_SAMPLE_ALPHA_TO_ONE* = 0x809F.GLenum
  GL_SAMPLE_COVERAGE* = 0x80A0.GLenum
  GL_SAMPLE_BUFFERS* = 0x80A8.GLenum
  GL_SAMPLES* = 0x80A9.GLenum
  GL_SAMPLE_COVERAGE_VALUE* = 0x80AA.GLenum
  GL_SAMPLE_COVERAGE_INVERT* = 0x80AB.GLenum
  GL_TEXTURE_CUBE_MAP* = 0x8513.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP* = 0x8514.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_X* = 0x8515.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X* = 0x8516.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y* = 0x8517.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y* = 0x8518.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z* = 0x8519.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z* = 0x851A.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP* = 0x851B.GLenum
  GL_MAX_CUBE_MAP_TEXTURE_SIZE* = 0x851C.GLenum
  GL_COMPRESSED_RGB* = 0x84ED.GLenum
  GL_COMPRESSED_RGBA* = 0x84EE.GLenum
  GL_TEXTURE_COMPRESSION_HINT* = 0x84EF.GLenum
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE* = 0x86A0.GLenum
  GL_TEXTURE_COMPRESSED* = 0x86A1.GLenum
  GL_NUM_COMPRESSED_TEXTURE_FORMATS* = 0x86A2.GLenum
  GL_COMPRESSED_TEXTURE_FORMATS* = 0x86A3.GLenum
  GL_CLAMP_TO_BORDER* = 0x812D.GLenum
  GL_BLEND_DST_RGB* = 0x80C8.GLenum
  GL_BLEND_SRC_RGB* = 0x80C9.GLenum
  GL_BLEND_DST_ALPHA* = 0x80CA.GLenum
  GL_BLEND_SRC_ALPHA* = 0x80CB.GLenum
  GL_POINT_FADE_THRESHOLD_SIZE* = 0x8128.GLenum
  GL_DEPTH_COMPONENT16* = 0x81A5.GLenum
  GL_DEPTH_COMPONENT24* = 0x81A6.GLenum
  GL_DEPTH_COMPONENT32* = 0x81A7.GLenum
  GL_MIRRORED_REPEAT* = 0x8370.GLenum
  GL_MAX_TEXTURE_LOD_BIAS* = 0x84FD.GLenum
  GL_TEXTURE_LOD_BIAS* = 0x8501.GLenum
  GL_INCR_WRAP* = 0x8507.GLenum
  GL_DECR_WRAP* = 0x8508.GLenum
  GL_TEXTURE_DEPTH_SIZE* = 0x884A.GLenum
  GL_TEXTURE_COMPARE_MODE* = 0x884C.GLenum
  GL_TEXTURE_COMPARE_FUNC* = 0x884D.GLenum
  GL_BLEND_COLOR* = 0x8005.GLenum
  GL_BLEND_EQUATION* = 0x8009.GLenum
  GL_CONSTANT_COLOR* = 0x8001.GLenum
  GL_ONE_MINUS_CONSTANT_COLOR* = 0x8002.GLenum
  GL_CONSTANT_ALPHA* = 0x8003.GLenum
  GL_ONE_MINUS_CONSTANT_ALPHA* = 0x8004.GLenum
  GL_FUNC_ADD* = 0x8006.GLenum
  GL_FUNC_REVERSE_SUBTRACT* = 0x800B.GLenum
  GL_FUNC_SUBTRACT* = 0x800A.GLenum
  GL_MIN* = 0x8007.GLenum
  GL_MAX* = 0x8008.GLenum
  GL_BUFFER_SIZE* = 0x8764.GLenum
  GL_BUFFER_USAGE* = 0x8765.GLenum
  GL_QUERY_COUNTER_BITS* = 0x8864.GLbitfield
  GL_CURRENT_QUERY* = 0x8865.GLenum
  GL_QUERY_RESULT* = 0x8866.GLenum
  GL_QUERY_RESULT_AVAILABLE* = 0x8867.GLenum
  GL_ARRAY_BUFFER* = 0x8892.GLenum
  GL_ELEMENT_ARRAY_BUFFER* = 0x8893.GLenum
  GL_ARRAY_BUFFER_BINDING* = 0x8894.GLenum
  GL_ELEMENT_ARRAY_BUFFER_BINDING* = 0x8895.GLenum
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING* = 0x889F.GLenum
  GL_READ_ONLY* = 0x88B8.GLenum
  GL_WRITE_ONLY* = 0x88B9.GLenum
  GL_READ_WRITE* = 0x88BA.GLenum
  GL_BUFFER_ACCESS* = 0x88BB.GLenum
  GL_BUFFER_MAPPED* = 0x88BC.GLenum
  GL_BUFFER_MAP_POINTER* = 0x88BD.GLenum
  GL_STREAM_DRAW* = 0x88E0.GLenum
  GL_STREAM_READ* = 0x88E1.GLenum
  GL_STREAM_COPY* = 0x88E2.GLenum
  GL_STATIC_DRAW* = 0x88E4.GLenum
  GL_STATIC_READ* = 0x88E5.GLenum
  GL_STATIC_COPY* = 0x88E6.GLenum
  GL_DYNAMIC_DRAW* = 0x88E8.GLenum
  GL_DYNAMIC_READ* = 0x88E9.GLenum
  GL_DYNAMIC_COPY* = 0x88EA.GLenum
  GL_SAMPLES_PASSED* = 0x8914.GLenum
  GL_SRC1_ALPHA* = 0x8589.GLenum
  GL_BLEND_EQUATION_RGB* = 0x8009.GLenum
  GL_VERTEX_ATTRIB_ARRAY_ENABLED* = 0x8622.GLenum
  GL_VERTEX_ATTRIB_ARRAY_SIZE* = 0x8623.GLenum
  GL_VERTEX_ATTRIB_ARRAY_STRIDE* = 0x8624.GLenum
  GL_VERTEX_ATTRIB_ARRAY_TYPE* = 0x8625.GLenum
  GL_CURRENT_VERTEX_ATTRIB* = 0x8626.GLenum
  GL_VERTEX_PROGRAM_POINT_SIZE* = 0x8642.GLenum
  GL_VERTEX_ATTRIB_ARRAY_POINTER* = 0x8645.GLenum
  GL_STENCIL_BACK_FUNC* = 0x8800.GLenum
  GL_STENCIL_BACK_FAIL* = 0x8801.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_FAIL* = 0x8802.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_PASS* = 0x8803.GLenum
  GL_MAX_DRAW_BUFFERS* = 0x8824.GLenum
  GL_DRAW_BUFFER0* = 0x8825.GLenum
  GL_DRAW_BUFFER1* = 0x8826.GLenum
  GL_DRAW_BUFFER2* = 0x8827.GLenum
  GL_DRAW_BUFFER3* = 0x8828.GLenum
  GL_DRAW_BUFFER4* = 0x8829.GLenum
  GL_DRAW_BUFFER5* = 0x882A.GLenum
  GL_DRAW_BUFFER6* = 0x882B.GLenum
  GL_DRAW_BUFFER7* = 0x882C.GLenum
  GL_DRAW_BUFFER8* = 0x882D.GLenum
  GL_DRAW_BUFFER9* = 0x882E.GLenum
  GL_DRAW_BUFFER10* = 0x882F.GLenum
  GL_DRAW_BUFFER11* = 0x8830.GLenum
  GL_DRAW_BUFFER12* = 0x8831.GLenum
  GL_DRAW_BUFFER13* = 0x8832.GLenum
  GL_DRAW_BUFFER14* = 0x8833.GLenum
  GL_DRAW_BUFFER15* = 0x8834.GLenum
  GL_BLEND_EQUATION_ALPHA* = 0x883D.GLenum
  GL_MAX_VERTEX_ATTRIBS* = 0x8869.GLenum
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED* = 0x886A.GLenum
  GL_MAX_TEXTURE_IMAGE_UNITS* = 0x8872.GLenum
  GL_FRAGMENT_SHADER* = 0x8B30.GLenum
  GL_VERTEX_SHADER* = 0x8B31.GLenum
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS* = 0x8B49.GLenum
  GL_MAX_VERTEX_UNIFORM_COMPONENTS* = 0x8B4A.GLenum
  GL_MAX_VARYING_FLOATS* = 0x8B4B.GLenum
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS* = 0x8B4C.GLenum
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS* = 0x8B4D.GLenum
  GL_SHADER_TYPE* = 0x8B4F.GLenum
  GL_FLOAT_VEC2* = 0x8B50.GLenum
  GL_FLOAT_VEC3* = 0x8B51.GLenum
  GL_FLOAT_VEC4* = 0x8B52.GLenum
  GL_INT_VEC2* = 0x8B53.GLenum
  GL_INT_VEC3* = 0x8B54.GLenum
  GL_INT_VEC4* = 0x8B55.GLenum
  GL_BOOL* = 0x8B56.GLenum
  GL_BOOL_VEC2* = 0x8B57.GLenum
  GL_BOOL_VEC3* = 0x8B58.GLenum
  GL_BOOL_VEC4* = 0x8B59.GLenum
  GL_FLOAT_MAT2* = 0x8B5A.GLenum
  GL_FLOAT_MAT3* = 0x8B5B.GLenum
  GL_FLOAT_MAT4* = 0x8B5C.GLenum
  GL_SAMPLER_1D* = 0x8B5D.GLenum
  GL_SAMPLER_2D* = 0x8B5E.GLenum
  GL_SAMPLER_3D* = 0x8B5F.GLenum
  GL_SAMPLER_CUBE* = 0x8B60.GLenum
  GL_SAMPLER_1D_SHADOW* = 0x8B61.GLenum
  GL_SAMPLER_2D_SHADOW* = 0x8B62.GLenum
  GL_DELETE_STATUS* = 0x8B80.GLenum
  GL_COMPILE_STATUS* = 0x8B81.GLenum
  GL_LINK_STATUS* = 0x8B82.GLenum
  GL_VALIDATE_STATUS* = 0x8B83.GLenum
  GL_INFO_LOG_LENGTH* = 0x8B84.GLenum
  GL_ATTACHED_SHADERS* = 0x8B85.GLenum
  GL_ACTIVE_UNIFORMS* = 0x8B86.GLenum
  GL_ACTIVE_UNIFORM_MAX_LENGTH* = 0x8B87.GLenum
  GL_SHADER_SOURCE_LENGTH* = 0x8B88.GLenum
  GL_ACTIVE_ATTRIBUTES* = 0x8B89.GLenum
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH* = 0x8B8A.GLenum
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT* = 0x8B8B.GLenum
  GL_SHADING_LANGUAGE_VERSION* = 0x8B8C.GLenum
  GL_CURRENT_PROGRAM* = 0x8B8D.GLenum
  GL_POINT_SPRITE_COORD_ORIGIN* = 0x8CA0.GLenum
  GL_LOWER_LEFT* = 0x8CA1.GLenum
  GL_UPPER_LEFT* = 0x8CA2.GLenum
  GL_STENCIL_BACK_REF* = 0x8CA3.GLenum
  GL_STENCIL_BACK_VALUE_MASK* = 0x8CA4.GLenum
  GL_STENCIL_BACK_WRITEMASK* = 0x8CA5.GLenum
  GL_PIXEL_PACK_BUFFER* = 0x88EB.GLenum
  GL_PIXEL_UNPACK_BUFFER* = 0x88EC.GLenum
  GL_PIXEL_PACK_BUFFER_BINDING* = 0x88ED.GLenum
  GL_PIXEL_UNPACK_BUFFER_BINDING* = 0x88EF.GLenum
  GL_FLOAT_MAT2x3* = 0x8B65.GLenum
  GL_FLOAT_MAT2x4* = 0x8B66.GLenum
  GL_FLOAT_MAT3x2* = 0x8B67.GLenum
  GL_FLOAT_MAT3x4* = 0x8B68.GLenum
  GL_FLOAT_MAT4x2* = 0x8B69.GLenum
  GL_FLOAT_MAT4x3* = 0x8B6A.GLenum
  GL_SRGB* = 0x8C40.GLenum
  GL_SRGB8* = 0x8C41.GLenum
  GL_SRGB_ALPHA* = 0x8C42.GLenum
  GL_SRGB8_ALPHA8* = 0x8C43.GLenum
  GL_COMPRESSED_SRGB* = 0x8C48.GLenum
  GL_COMPRESSED_SRGB_ALPHA* = 0x8C49.GLenum
  GL_COMPARE_REF_TO_TEXTURE* = 0x884E.GLenum
  GL_CLIP_DISTANCE0* = 0x3000.GLenum
  GL_CLIP_DISTANCE1* = 0x3001.GLenum
  GL_CLIP_DISTANCE2* = 0x3002.GLenum
  GL_CLIP_DISTANCE3* = 0x3003.GLenum
  GL_CLIP_DISTANCE4* = 0x3004.GLenum
  GL_CLIP_DISTANCE5* = 0x3005.GLenum
  GL_CLIP_DISTANCE6* = 0x3006.GLenum
  GL_CLIP_DISTANCE7* = 0x3007.GLenum
  GL_MAX_CLIP_DISTANCES* = 0x0D32.GLenum
  GL_MAJOR_VERSION* = 0x821B.GLenum
  GL_MINOR_VERSION* = 0x821C.GLenum
  GL_NUM_EXTENSIONS* = 0x821D.GLenum
  GL_CONTEXT_FLAGS* = 0x821E.GLenum
  GL_COMPRESSED_RED* = 0x8225.GLenum
  GL_COMPRESSED_RG* = 0x8226.GLenum
  GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT* = 0x00000001.GLbitfield
  GL_RGBA32F* = 0x8814.GLenum
  GL_RGB32F* = 0x8815.GLenum
  GL_RGBA16F* = 0x881A.GLenum
  GL_RGB16F* = 0x881B.GLenum
  GL_VERTEX_ATTRIB_ARRAY_INTEGER* = 0x88FD.GLenum
  GL_MAX_ARRAY_TEXTURE_LAYERS* = 0x88FF.GLenum
  GL_MIN_PROGRAM_TEXEL_OFFSET* = 0x8904.GLenum
  GL_MAX_PROGRAM_TEXEL_OFFSET* = 0x8905.GLenum
  GL_CLAMP_READ_COLOR* = 0x891C.GLenum
  GL_FIXED_ONLY* = 0x891D.GLenum
  GL_MAX_VARYING_COMPONENTS* = 0x8B4B.GLenum
  GL_TEXTURE_1D_ARRAY* = 0x8C18.GLenum
  GL_PROXY_TEXTURE_1D_ARRAY* = 0x8C19.GLenum
  GL_TEXTURE_2D_ARRAY* = 0x8C1A.GLenum
  GL_PROXY_TEXTURE_2D_ARRAY* = 0x8C1B.GLenum
  GL_TEXTURE_BINDING_1D_ARRAY* = 0x8C1C.GLenum
  GL_TEXTURE_BINDING_2D_ARRAY* = 0x8C1D.GLenum
  GL_R11F_G11F_B10F* = 0x8C3A.GLenum
  GL_UNSIGNED_INT_10F_11F_11F_REV* = 0x8C3B.GLenum
  GL_RGB9_E5* = 0x8C3D.GLenum
  GL_UNSIGNED_INT_5_9_9_9_REV* = 0x8C3E.GLenum
  GL_TEXTURE_SHARED_SIZE* = 0x8C3F.GLenum
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH* = 0x8C76.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE* = 0x8C7F.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS* = 0x8C80.GLenum
  GL_TRANSFORM_FEEDBACK_VARYINGS* = 0x8C83.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_START* = 0x8C84.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE* = 0x8C85.GLenum
  GL_PRIMITIVES_GENERATED* = 0x8C87.GLenum
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN* = 0x8C88.GLenum
  GL_RASTERIZER_DISCARD* = 0x8C89.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS* = 0x8C8A.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS* = 0x8C8B.GLenum
  GL_INTERLEAVED_ATTRIBS* = 0x8C8C.GLenum
  GL_SEPARATE_ATTRIBS* = 0x8C8D.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER* = 0x8C8E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING* = 0x8C8F.GLenum
  GL_RGBA32UI* = 0x8D70.GLenum
  GL_RGB32UI* = 0x8D71.GLenum
  GL_RGBA16UI* = 0x8D76.GLenum
  GL_RGB16UI* = 0x8D77.GLenum
  GL_RGBA8UI* = 0x8D7C.GLenum
  GL_RGB8UI* = 0x8D7D.GLenum
  GL_RGBA32I* = 0x8D82.GLenum
  GL_RGB32I* = 0x8D83.GLenum
  GL_RGBA16I* = 0x8D88.GLenum
  GL_RGB16I* = 0x8D89.GLenum
  GL_RGBA8I* = 0x8D8E.GLenum
  GL_RGB8I* = 0x8D8F.GLenum
  GL_RED_INTEGER* = 0x8D94.GLenum
  GL_GREEN_INTEGER* = 0x8D95.GLenum
  GL_BLUE_INTEGER* = 0x8D96.GLenum
  GL_RGB_INTEGER* = 0x8D98.GLenum
  GL_RGBA_INTEGER* = 0x8D99.GLenum
  GL_BGR_INTEGER* = 0x8D9A.GLenum
  GL_BGRA_INTEGER* = 0x8D9B.GLenum
  GL_SAMPLER_1D_ARRAY* = 0x8DC0.GLenum
  GL_SAMPLER_2D_ARRAY* = 0x8DC1.GLenum
  GL_SAMPLER_1D_ARRAY_SHADOW* = 0x8DC3.GLenum
  GL_SAMPLER_2D_ARRAY_SHADOW* = 0x8DC4.GLenum
  GL_SAMPLER_CUBE_SHADOW* = 0x8DC5.GLenum
  GL_UNSIGNED_INT_VEC2* = 0x8DC6.GLenum
  GL_UNSIGNED_INT_VEC3* = 0x8DC7.GLenum
  GL_UNSIGNED_INT_VEC4* = 0x8DC8.GLenum
  GL_INT_SAMPLER_1D* = 0x8DC9.GLenum
  GL_INT_SAMPLER_2D* = 0x8DCA.GLenum
  GL_INT_SAMPLER_3D* = 0x8DCB.GLenum
  GL_INT_SAMPLER_CUBE* = 0x8DCC.GLenum
  GL_INT_SAMPLER_1D_ARRAY* = 0x8DCE.GLenum
  GL_INT_SAMPLER_2D_ARRAY* = 0x8DCF.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D* = 0x8DD1.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D* = 0x8DD2.GLenum
  GL_UNSIGNED_INT_SAMPLER_3D* = 0x8DD3.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE* = 0x8DD4.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY* = 0x8DD6.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY* = 0x8DD7.GLenum
  GL_QUERY_WAIT* = 0x8E13.GLenum
  GL_QUERY_NO_WAIT* = 0x8E14.GLenum
  GL_QUERY_BY_REGION_WAIT* = 0x8E15.GLenum
  GL_QUERY_BY_REGION_NO_WAIT* = 0x8E16.GLenum
  GL_BUFFER_ACCESS_FLAGS* = 0x911F.GLenum
  GL_BUFFER_MAP_LENGTH* = 0x9120.GLenum
  GL_BUFFER_MAP_OFFSET* = 0x9121.GLenum
  GL_DEPTH_COMPONENT32F* = 0x8CAC.GLenum
  GL_DEPTH32F_STENCIL8* = 0x8CAD.GLenum
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV* = 0x8DAD.GLenum
  GL_INVALID_FRAMEBUFFER_OPERATION* = 0x0506.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING* = 0x8210.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE* = 0x8211.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE* = 0x8212.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE* = 0x8213.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE* = 0x8214.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE* = 0x8215.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE* = 0x8216.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE* = 0x8217.GLenum
  GL_FRAMEBUFFER_DEFAULT* = 0x8218.GLenum
  GL_FRAMEBUFFER_UNDEFINED* = 0x8219.GLenum
  GL_DEPTH_STENCIL_ATTACHMENT* = 0x821A.GLenum
  GL_MAX_RENDERBUFFER_SIZE* = 0x84E8.GLenum
  GL_DEPTH_STENCIL* = 0x84F9.GLenum
  GL_UNSIGNED_INT_24_8* = 0x84FA.GLenum
  GL_DEPTH24_STENCIL8* = 0x88F0.GLenum
  GL_TEXTURE_STENCIL_SIZE* = 0x88F1.GLenum
  GL_TEXTURE_RED_TYPE* = 0x8C10.GLenum
  GL_TEXTURE_GREEN_TYPE* = 0x8C11.GLenum
  GL_TEXTURE_BLUE_TYPE* = 0x8C12.GLenum
  GL_TEXTURE_ALPHA_TYPE* = 0x8C13.GLenum
  GL_TEXTURE_DEPTH_TYPE* = 0x8C16.GLenum
  GL_UNSIGNED_NORMALIZED* = 0x8C17.GLenum
  GL_FRAMEBUFFER_BINDING* = 0x8CA6.GLenum
  GL_DRAW_FRAMEBUFFER_BINDING* = 0x8CA6.GLenum
  GL_RENDERBUFFER_BINDING* = 0x8CA7.GLenum
  GL_READ_FRAMEBUFFER* = 0x8CA8.GLenum
  GL_DRAW_FRAMEBUFFER* = 0x8CA9.GLenum
  GL_READ_FRAMEBUFFER_BINDING* = 0x8CAA.GLenum
  GL_RENDERBUFFER_SAMPLES* = 0x8CAB.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE* = 0x8CD0.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME* = 0x8CD1.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL* = 0x8CD2.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE* = 0x8CD3.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER* = 0x8CD4.GLenum
  GL_FRAMEBUFFER_COMPLETE* = 0x8CD5.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT* = 0x8CD6.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT* = 0x8CD7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER* = 0x8CDB.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER* = 0x8CDC.GLenum
  GL_FRAMEBUFFER_UNSUPPORTED* = 0x8CDD.GLenum
  GL_MAX_COLOR_ATTACHMENTS* = 0x8CDF.GLenum
  GL_COLOR_ATTACHMENT0* = 0x8CE0.GLenum
  GL_COLOR_ATTACHMENT1* = 0x8CE1.GLenum
  GL_COLOR_ATTACHMENT2* = 0x8CE2.GLenum
  GL_COLOR_ATTACHMENT3* = 0x8CE3.GLenum
  GL_COLOR_ATTACHMENT4* = 0x8CE4.GLenum
  GL_COLOR_ATTACHMENT5* = 0x8CE5.GLenum
  GL_COLOR_ATTACHMENT6* = 0x8CE6.GLenum
  GL_COLOR_ATTACHMENT7* = 0x8CE7.GLenum
  GL_COLOR_ATTACHMENT8* = 0x8CE8.GLenum
  GL_COLOR_ATTACHMENT9* = 0x8CE9.GLenum
  GL_COLOR_ATTACHMENT10* = 0x8CEA.GLenum
  GL_COLOR_ATTACHMENT11* = 0x8CEB.GLenum
  GL_COLOR_ATTACHMENT12* = 0x8CEC.GLenum
  GL_COLOR_ATTACHMENT13* = 0x8CED.GLenum
  GL_COLOR_ATTACHMENT14* = 0x8CEE.GLenum
  GL_COLOR_ATTACHMENT15* = 0x8CEF.GLenum
  GL_COLOR_ATTACHMENT16* = 0x8CF0.GLenum
  GL_COLOR_ATTACHMENT17* = 0x8CF1.GLenum
  GL_COLOR_ATTACHMENT18* = 0x8CF2.GLenum
  GL_COLOR_ATTACHMENT19* = 0x8CF3.GLenum
  GL_COLOR_ATTACHMENT20* = 0x8CF4.GLenum
  GL_COLOR_ATTACHMENT21* = 0x8CF5.GLenum
  GL_COLOR_ATTACHMENT22* = 0x8CF6.GLenum
  GL_COLOR_ATTACHMENT23* = 0x8CF7.GLenum
  GL_COLOR_ATTACHMENT24* = 0x8CF8.GLenum
  GL_COLOR_ATTACHMENT25* = 0x8CF9.GLenum
  GL_COLOR_ATTACHMENT26* = 0x8CFA.GLenum
  GL_COLOR_ATTACHMENT27* = 0x8CFB.GLenum
  GL_COLOR_ATTACHMENT28* = 0x8CFC.GLenum
  GL_COLOR_ATTACHMENT29* = 0x8CFD.GLenum
  GL_COLOR_ATTACHMENT30* = 0x8CFE.GLenum
  GL_COLOR_ATTACHMENT31* = 0x8CFF.GLenum
  GL_DEPTH_ATTACHMENT* = 0x8D00.GLenum
  GL_STENCIL_ATTACHMENT* = 0x8D20.GLenum
  GL_FRAMEBUFFER* = 0x8D40.GLenum
  GL_RENDERBUFFER* = 0x8D41.GLenum
  GL_RENDERBUFFER_WIDTH* = 0x8D42.GLenum
  GL_RENDERBUFFER_HEIGHT* = 0x8D43.GLenum
  GL_RENDERBUFFER_INTERNAL_FORMAT* = 0x8D44.GLenum
  GL_STENCIL_INDEX1* = 0x8D46.GLenum
  GL_STENCIL_INDEX4* = 0x8D47.GLenum
  GL_STENCIL_INDEX8* = 0x8D48.GLenum
  GL_STENCIL_INDEX16* = 0x8D49.GLenum
  GL_RENDERBUFFER_RED_SIZE* = 0x8D50.GLenum
  GL_RENDERBUFFER_GREEN_SIZE* = 0x8D51.GLenum
  GL_RENDERBUFFER_BLUE_SIZE* = 0x8D52.GLenum
  GL_RENDERBUFFER_ALPHA_SIZE* = 0x8D53.GLenum
  GL_RENDERBUFFER_DEPTH_SIZE* = 0x8D54.GLenum
  GL_RENDERBUFFER_STENCIL_SIZE* = 0x8D55.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE* = 0x8D56.GLenum
  GL_MAX_SAMPLES* = 0x8D57.GLenum
  GL_FRAMEBUFFER_SRGB* = 0x8DB9.GLenum
  GL_HALF_FLOAT* = 0x140B.GLenum
  GL_MAP_READ_BIT* = 0x0001.GLbitfield
  GL_MAP_WRITE_BIT* = 0x0002.GLbitfield
  GL_MAP_INVALIDATE_RANGE_BIT* = 0x0004.GLbitfield
  GL_MAP_INVALIDATE_BUFFER_BIT* = 0x0008.GLbitfield
  GL_MAP_FLUSH_EXPLICIT_BIT* = 0x0010.GLbitfield
  GL_MAP_UNSYNCHRONIZED_BIT* = 0x0020.GLbitfield
  GL_COMPRESSED_RED_RGTC1* = 0x8DBB.GLenum
  GL_COMPRESSED_SIGNED_RED_RGTC1* = 0x8DBC.GLenum
  GL_COMPRESSED_RG_RGTC2* = 0x8DBD.GLenum
  GL_COMPRESSED_SIGNED_RG_RGTC2* = 0x8DBE.GLenum
  GL_RG* = 0x8227.GLenum
  GL_RG_INTEGER* = 0x8228.GLenum
  GL_R8* = 0x8229.GLenum
  GL_R16* = 0x822A.GLenum
  GL_RG8* = 0x822B.GLenum
  GL_RG16* = 0x822C.GLenum
  GL_R16F* = 0x822D.GLenum
  GL_R32F* = 0x822E.GLenum
  GL_RG16F* = 0x822F.GLenum
  GL_RG32F* = 0x8230.GLenum
  GL_R8I* = 0x8231.GLenum
  GL_R8UI* = 0x8232.GLenum
  GL_R16I* = 0x8233.GLenum
  GL_R16UI* = 0x8234.GLenum
  GL_R32I* = 0x8235.GLenum
  GL_R32UI* = 0x8236.GLenum
  GL_RG8I* = 0x8237.GLenum
  GL_RG8UI* = 0x8238.GLenum
  GL_RG16I* = 0x8239.GLenum
  GL_RG16UI* = 0x823A.GLenum
  GL_RG32I* = 0x823B.GLenum
  GL_RG32UI* = 0x823C.GLenum
  GL_VERTEX_ARRAY_BINDING* = 0x85B5.GLenum
  GL_SAMPLER_2D_RECT* = 0x8B63.GLenum
  GL_SAMPLER_2D_RECT_SHADOW* = 0x8B64.GLenum
  GL_SAMPLER_BUFFER* = 0x8DC2.GLenum
  GL_INT_SAMPLER_2D_RECT* = 0x8DCD.GLenum
  GL_INT_SAMPLER_BUFFER* = 0x8DD0.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_RECT* = 0x8DD5.GLenum
  GL_UNSIGNED_INT_SAMPLER_BUFFER* = 0x8DD8.GLenum
  GL_TEXTURE_BUFFER* = 0x8C2A.GLenum
  GL_MAX_TEXTURE_BUFFER_SIZE* = 0x8C2B.GLenum
  GL_TEXTURE_BINDING_BUFFER* = 0x8C2C.GLenum
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING* = 0x8C2D.GLenum
  GL_TEXTURE_RECTANGLE* = 0x84F5.GLenum
  GL_TEXTURE_BINDING_RECTANGLE* = 0x84F6.GLenum
  GL_PROXY_TEXTURE_RECTANGLE* = 0x84F7.GLenum
  GL_MAX_RECTANGLE_TEXTURE_SIZE* = 0x84F8.GLenum
  GL_R8_SNORM* = 0x8F94.GLenum
  GL_RG8_SNORM* = 0x8F95.GLenum
  GL_RGB8_SNORM* = 0x8F96.GLenum
  GL_RGBA8_SNORM* = 0x8F97.GLenum
  GL_R16_SNORM* = 0x8F98.GLenum
  GL_RG16_SNORM* = 0x8F99.GLenum
  GL_RGB16_SNORM* = 0x8F9A.GLenum
  GL_RGBA16_SNORM* = 0x8F9B.GLenum
  GL_SIGNED_NORMALIZED* = 0x8F9C.GLenum
  GL_PRIMITIVE_RESTART* = 0x8F9D.GLenum
  GL_PRIMITIVE_RESTART_INDEX* = 0x8F9E.GLenum
  GL_COPY_READ_BUFFER* = 0x8F36.GLenum
  GL_COPY_WRITE_BUFFER* = 0x8F37.GLenum
  GL_UNIFORM_BUFFER* = 0x8A11.GLenum
  GL_UNIFORM_BUFFER_BINDING* = 0x8A28.GLenum
  GL_UNIFORM_BUFFER_START* = 0x8A29.GLenum
  GL_UNIFORM_BUFFER_SIZE* = 0x8A2A.GLenum
  GL_MAX_VERTEX_UNIFORM_BLOCKS* = 0x8A2B.GLenum
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS* = 0x8A2C.GLenum
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS* = 0x8A2D.GLenum
  GL_MAX_COMBINED_UNIFORM_BLOCKS* = 0x8A2E.GLenum
  GL_MAX_UNIFORM_BUFFER_BINDINGS* = 0x8A2F.GLenum
  GL_MAX_UNIFORM_BLOCK_SIZE* = 0x8A30.GLenum
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS* = 0x8A31.GLenum
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS* = 0x8A32.GLenum
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS* = 0x8A33.GLenum
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT* = 0x8A34.GLenum
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH* = 0x8A35.GLenum
  GL_ACTIVE_UNIFORM_BLOCKS* = 0x8A36.GLenum
  GL_UNIFORM_TYPE* = 0x8A37.GLenum
  GL_UNIFORM_SIZE* = 0x8A38.GLenum
  GL_UNIFORM_NAME_LENGTH* = 0x8A39.GLenum
  GL_UNIFORM_BLOCK_INDEX* = 0x8A3A.GLenum
  GL_UNIFORM_OFFSET* = 0x8A3B.GLenum
  GL_UNIFORM_ARRAY_STRIDE* = 0x8A3C.GLenum
  GL_UNIFORM_MATRIX_STRIDE* = 0x8A3D.GLenum
  GL_UNIFORM_IS_ROW_MAJOR* = 0x8A3E.GLenum
  GL_UNIFORM_BLOCK_BINDING* = 0x8A3F.GLenum
  GL_UNIFORM_BLOCK_DATA_SIZE* = 0x8A40.GLenum
  GL_UNIFORM_BLOCK_NAME_LENGTH* = 0x8A41.GLenum
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS* = 0x8A42.GLenum
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES* = 0x8A43.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER* = 0x8A44.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER* = 0x8A45.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER* = 0x8A46.GLenum
  GL_CONTEXT_CORE_PROFILE_BIT* = 0x00000001.GLbitfield
  GL_CONTEXT_COMPATIBILITY_PROFILE_BIT* = 0x00000002.GLbitfield
  GL_LINES_ADJACENCY* = 0x000A.GLenum
  GL_LINE_STRIP_ADJACENCY* = 0x000B.GLenum
  GL_TRIANGLES_ADJACENCY* = 0x000C.GLenum
  GL_TRIANGLE_STRIP_ADJACENCY* = 0x000D.GLenum
  GL_PROGRAM_POINT_SIZE* = 0x8642.GLenum
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS* = 0x8C29.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED* = 0x8DA7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS* = 0x8DA8.GLenum
  GL_GEOMETRY_SHADER* = 0x8DD9.GLenum
  GL_GEOMETRY_VERTICES_OUT* = 0x8916.GLenum
  GL_GEOMETRY_INPUT_TYPE* = 0x8917.GLenum
  GL_GEOMETRY_OUTPUT_TYPE* = 0x8918.GLenum
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS* = 0x8DDF.GLenum
  GL_MAX_GEOMETRY_OUTPUT_VERTICES* = 0x8DE0.GLenum
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS* = 0x8DE1.GLenum
  GL_MAX_VERTEX_OUTPUT_COMPONENTS* = 0x9122.GLenum
  GL_MAX_GEOMETRY_INPUT_COMPONENTS* = 0x9123.GLenum
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS* = 0x9124.GLenum
  GL_MAX_FRAGMENT_INPUT_COMPONENTS* = 0x9125.GLenum
  GL_CONTEXT_PROFILE_MASK* = 0x9126.GLenum
  GL_DEPTH_CLAMP* = 0x864F.GLenum
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION* = 0x8E4C.GLenum
  GL_FIRST_VERTEX_CONVENTION* = 0x8E4D.GLenum
  GL_LAST_VERTEX_CONVENTION* = 0x8E4E.GLenum
  GL_PROVOKING_VERTEX* = 0x8E4F.GLenum
  GL_TEXTURE_CUBE_MAP_SEAMLESS* = 0x884F.GLenum
  GL_MAX_SERVER_WAIT_TIMEOUT* = 0x9111.GLenum
  GL_OBJECT_TYPE* = 0x9112.GLenum
  GL_SYNC_CONDITION* = 0x9113.GLenum
  GL_SYNC_STATUS* = 0x9114.GLenum
  GL_SYNC_FLAGS* = 0x9115.GLenum
  GL_SYNC_FENCE* = 0x9116.GLenum
  GL_SYNC_GPU_COMMANDS_COMPLETE* = 0x9117.GLenum
  GL_UNSIGNALED* = 0x9118.GLenum
  GL_SIGNALED* = 0x9119.GLenum
  GL_ALREADY_SIGNALED* = 0x911A.GLenum
  GL_TIMEOUT_EXPIRED* = 0x911B.GLenum
  GL_CONDITION_SATISFIED* = 0x911C.GLenum
  GL_WAIT_FAILED* = 0x911D.GLenum
  GL_SYNC_FLUSH_COMMANDS_BIT* = 0x00000001.GLbitfield
  GL_SAMPLE_POSITION* = 0x8E50.GLenum
  GL_SAMPLE_MASK* = 0x8E51.GLenum
  GL_SAMPLE_MASK_VALUE* = 0x8E52.GLenum
  GL_MAX_SAMPLE_MASK_WORDS* = 0x8E59.GLenum
  GL_TEXTURE_2D_MULTISAMPLE* = 0x9100.GLenum
  GL_PROXY_TEXTURE_2D_MULTISAMPLE* = 0x9101.GLenum
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY* = 0x9102.GLenum
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY* = 0x9103.GLenum
  GL_TEXTURE_BINDING_2D_MULTISAMPLE* = 0x9104.GLenum
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY* = 0x9105.GLenum
  GL_TEXTURE_SAMPLES* = 0x9106.GLenum
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS* = 0x9107.GLenum
  GL_SAMPLER_2D_MULTISAMPLE* = 0x9108.GLenum
  GL_INT_SAMPLER_2D_MULTISAMPLE* = 0x9109.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE* = 0x910A.GLenum
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY* = 0x910B.GLenum
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY* = 0x910C.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY* = 0x910D.GLenum
  GL_MAX_COLOR_TEXTURE_SAMPLES* = 0x910E.GLenum
  GL_MAX_DEPTH_TEXTURE_SAMPLES* = 0x910F.GLenum
  GL_MAX_INTEGER_SAMPLES* = 0x9110.GLenum
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR* = 0x88FE.GLenum
  GL_SRC1_COLOR* = 0x88F9.GLenum
  GL_ONE_MINUS_SRC1_COLOR* = 0x88FA.GLenum
  GL_ONE_MINUS_SRC1_ALPHA* = 0x88FB.GLenum
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS* = 0x88FC.GLenum
  GL_ANY_SAMPLES_PASSED* = 0x8C2F.GLenum
  GL_SAMPLER_BINDING* = 0x8919.GLenum
  GL_RGB10_A2UI* = 0x906F.GLenum
  GL_TEXTURE_SWIZZLE_R* = 0x8E42.GLenum
  GL_TEXTURE_SWIZZLE_G* = 0x8E43.GLenum
  GL_TEXTURE_SWIZZLE_B* = 0x8E44.GLenum
  GL_TEXTURE_SWIZZLE_A* = 0x8E45.GLenum
  GL_TEXTURE_SWIZZLE_RGBA* = 0x8E46.GLenum
  GL_TIME_ELAPSED* = 0x88BF.GLenum
  GL_TIMESTAMP* = 0x8E28.GLenum
  GL_INT_2_10_10_10_REV* = 0x8D9F.GLenum
  GL_SAMPLE_SHADING* = 0x8C36.GLenum
  GL_MIN_SAMPLE_SHADING_VALUE* = 0x8C37.GLenum
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET* = 0x8E5E.GLenum
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET* = 0x8E5F.GLenum
  GL_TEXTURE_CUBE_MAP_ARRAY* = 0x9009.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY* = 0x900A.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY* = 0x900B.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY* = 0x900C.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW* = 0x900D.GLenum
  GL_INT_SAMPLER_CUBE_MAP_ARRAY* = 0x900E.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY* = 0x900F.GLenum
  GL_DRAW_INDIRECT_BUFFER* = 0x8F3F.GLenum
  GL_DRAW_INDIRECT_BUFFER_BINDING* = 0x8F43.GLenum
  GL_GEOMETRY_SHADER_INVOCATIONS* = 0x887F.GLenum
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS* = 0x8E5A.GLenum
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET* = 0x8E5B.GLenum
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET* = 0x8E5C.GLenum
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS* = 0x8E5D.GLbitfield
  GL_MAX_VERTEX_STREAMS* = 0x8E71.GLenum
  GL_DOUBLE_VEC2* = 0x8FFC.GLenum
  GL_DOUBLE_VEC3* = 0x8FFD.GLenum
  GL_DOUBLE_VEC4* = 0x8FFE.GLenum
  GL_DOUBLE_MAT2* = 0x8F46.GLenum
  GL_DOUBLE_MAT3* = 0x8F47.GLenum
  GL_DOUBLE_MAT4* = 0x8F48.GLenum
  GL_DOUBLE_MAT2x3* = 0x8F49.GLenum
  GL_DOUBLE_MAT2x4* = 0x8F4A.GLenum
  GL_DOUBLE_MAT3x2* = 0x8F4B.GLenum
  GL_DOUBLE_MAT3x4* = 0x8F4C.GLenum
  GL_DOUBLE_MAT4x2* = 0x8F4D.GLenum
  GL_DOUBLE_MAT4x3* = 0x8F4E.GLenum
  GL_ACTIVE_SUBROUTINES* = 0x8DE5.GLenum
  GL_ACTIVE_SUBROUTINE_UNIFORMS* = 0x8DE6.GLenum
  GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS* = 0x8E47.GLenum
  GL_ACTIVE_SUBROUTINE_MAX_LENGTH* = 0x8E48.GLenum
  GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH* = 0x8E49.GLenum
  GL_MAX_SUBROUTINES* = 0x8DE7.GLenum
  GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS* = 0x8DE8.GLenum
  GL_NUM_COMPATIBLE_SUBROUTINES* = 0x8E4A.GLenum
  GL_COMPATIBLE_SUBROUTINES* = 0x8E4B.GLenum
  GL_PATCHES* = 0x000E.GLenum
  GL_PATCH_VERTICES* = 0x8E72.GLenum
  GL_PATCH_DEFAULT_INNER_LEVEL* = 0x8E73.GLenum
  GL_PATCH_DEFAULT_OUTER_LEVEL* = 0x8E74.GLenum
  GL_TESS_CONTROL_OUTPUT_VERTICES* = 0x8E75.GLenum
  GL_TESS_GEN_MODE* = 0x8E76.GLenum
  GL_TESS_GEN_SPACING* = 0x8E77.GLenum
  GL_TESS_GEN_VERTEX_ORDER* = 0x8E78.GLenum
  GL_TESS_GEN_POINT_MODE* = 0x8E79.GLenum
  GL_ISOLINES* = 0x8E7A.GLenum
  GL_QUADS* = 0x0007.GLenum
  GL_FRACTIONAL_ODD* = 0x8E7B.GLenum
  GL_FRACTIONAL_EVEN* = 0x8E7C.GLenum
  GL_MAX_PATCH_VERTICES* = 0x8E7D.GLenum
  GL_MAX_TESS_GEN_LEVEL* = 0x8E7E.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS* = 0x8E7F.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS* = 0x8E80.GLenum
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS* = 0x8E81.GLenum
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS* = 0x8E82.GLenum
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS* = 0x8E83.GLenum
  GL_MAX_TESS_PATCH_COMPONENTS* = 0x8E84.GLenum
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS* = 0x8E85.GLenum
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS* = 0x8E86.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS* = 0x8E89.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS* = 0x8E8A.GLenum
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS* = 0x886C.GLenum
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS* = 0x886D.GLenum
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS* = 0x8E1E.GLenum
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS* = 0x8E1F.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER* = 0x84F0.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER* = 0x84F1.GLenum
  GL_TESS_EVALUATION_SHADER* = 0x8E87.GLenum
  GL_TESS_CONTROL_SHADER* = 0x8E88.GLenum
  GL_TRANSFORM_FEEDBACK* = 0x8E22.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED* = 0x8E23.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE* = 0x8E24.GLenum
  GL_TRANSFORM_FEEDBACK_BINDING* = 0x8E25.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_BUFFERS* = 0x8E70.GLenum
  cGL_FIXED* = 0x140C.GLenum
  GL_IMPLEMENTATION_COLOR_READ_TYPE* = 0x8B9A.GLenum
  GL_IMPLEMENTATION_COLOR_READ_FORMAT* = 0x8B9B.GLenum
  GL_LOW_FLOAT* = 0x8DF0.GLenum
  GL_MEDIUM_FLOAT* = 0x8DF1.GLenum
  GL_HIGH_FLOAT* = 0x8DF2.GLenum
  GL_LOW_INT* = 0x8DF3.GLenum
  GL_MEDIUM_INT* = 0x8DF4.GLenum
  GL_HIGH_INT* = 0x8DF5.GLenum
  GL_SHADER_COMPILER* = 0x8DFA.GLenum
  GL_SHADER_BINARY_FORMATS* = 0x8DF8.GLenum
  GL_NUM_SHADER_BINARY_FORMATS* = 0x8DF9.GLenum
  GL_MAX_VERTEX_UNIFORM_VECTORS* = 0x8DFB.GLenum
  GL_MAX_VARYING_VECTORS* = 0x8DFC.GLenum
  GL_MAX_FRAGMENT_UNIFORM_VECTORS* = 0x8DFD.GLenum
  GL_RGB565* = 0x8D62.GLenum
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT* = 0x8257.GLenum
  GL_PROGRAM_BINARY_LENGTH* = 0x8741.GLenum
  GL_NUM_PROGRAM_BINARY_FORMATS* = 0x87FE.GLenum
  GL_PROGRAM_BINARY_FORMATS* = 0x87FF.GLenum
  GL_VERTEX_SHADER_BIT* = 0x00000001.GLbitfield
  GL_FRAGMENT_SHADER_BIT* = 0x00000002.GLbitfield
  GL_GEOMETRY_SHADER_BIT* = 0x00000004.GLbitfield
  GL_TESS_CONTROL_SHADER_BIT* = 0x00000008.GLbitfield
  GL_TESS_EVALUATION_SHADER_BIT* = 0x00000010.GLbitfield
  GL_ALL_SHADER_BITS* = 0xFFFFFFFF.GLbitfield
  GL_PROGRAM_SEPARABLE* = 0x8258.GLenum
  GL_ACTIVE_PROGRAM* = 0x8259.GLenum
  GL_PROGRAM_PIPELINE_BINDING* = 0x825A.GLenum
  GL_MAX_VIEWPORTS* = 0x825B.GLenum
  GL_VIEWPORT_SUBPIXEL_BITS* = 0x825C.GLbitfield
  GL_VIEWPORT_BOUNDS_RANGE* = 0x825D.GLenum
  GL_LAYER_PROVOKING_VERTEX* = 0x825E.GLenum
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX* = 0x825F.GLenum
  GL_UNDEFINED_VERTEX* = 0x8260.GLenum


# Functions
var
  GLAD_GL_VERSION_1_0*: bool
  GLAD_GL_VERSION_1_1*: bool
  GLAD_GL_VERSION_1_2*: bool
  GLAD_GL_VERSION_1_3*: bool
  GLAD_GL_VERSION_1_4*: bool
  GLAD_GL_VERSION_1_5*: bool
  GLAD_GL_VERSION_2_0*: bool
  GLAD_GL_VERSION_2_1*: bool
  GLAD_GL_VERSION_3_0*: bool
  GLAD_GL_VERSION_3_1*: bool
  GLAD_GL_VERSION_3_2*: bool
  GLAD_GL_VERSION_3_3*: bool
  GLAD_GL_VERSION_4_0*: bool
  GLAD_GL_VERSION_4_1*: bool

  glCullFace*: proc (mode: GLenum) {.stdcall.}
  glFrontFace*: proc (mode: GLenum) {.stdcall.}
  glHint*: proc (target: GLenum, mode: GLenum) {.stdcall.}
  glLineWidth*: proc (width: GLfloat) {.stdcall.}
  glPointSize*: proc (size: GLfloat) {.stdcall.}
  glPolygonMode*: proc (face: GLenum, mode: GLenum) {.stdcall.}
  glScissor*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glTexParameterf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glTexParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glDrawBuffer*: proc (buf: GLenum) {.stdcall.}
  glClear*: proc (mask: GLbitfield) {.stdcall.}
  glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}
  glClearStencil*: proc (s: GLint) {.stdcall.}
  glClearDepth*: proc (depth: GLdouble) {.stdcall.}
  glStencilMask*: proc (mask: GLuint) {.stdcall.}
  glColorMask*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.stdcall.}
  glDepthMask*: proc (flag: GLboolean) {.stdcall.}
  glDisable*: proc (cap: GLenum) {.stdcall.}
  glEnable*: proc (cap: GLenum) {.stdcall.}
  glFinish*: proc () {.stdcall.}
  glFlush*: proc () {.stdcall.}
  glBlendFunc*: proc (sfactor: GLenum, dfactor: GLenum) {.stdcall.}
  glLogicOp*: proc (opcode: GLenum) {.stdcall.}
  glStencilFunc*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}
  glStencilOp*: proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.stdcall.}
  glDepthFunc*: proc (`func`: GLenum) {.stdcall.}
  glPixelStoref*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glPixelStorei*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glReadBuffer*: proc (src: GLenum) {.stdcall.}
  glReadPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glGetBooleanv*: proc (pname: GLenum, data: ptr GLboolean) {.stdcall.}
  glGetDoublev*: proc (pname: GLenum, data: ptr GLdouble) {.stdcall.}
  glGetError*: proc (): GLenum {.stdcall.}
  glGetFloatv*: proc (pname: GLenum, data: ptr GLfloat) {.stdcall.}
  glGetIntegerv*: proc (pname: GLenum, data: ptr GLint) {.stdcall.}
  glGetString*: proc (name: GLenum): ptr GLubyte {.stdcall.}
  glGetTexImage*: proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glGetTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetTexLevelParameterfv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetTexLevelParameteriv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glIsEnabled*: proc (cap: GLenum): GLboolean {.stdcall.}
  glDepthRange*: proc (n: GLdouble, f: GLdouble) {.stdcall.}
  glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glDrawArrays*: proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}
  glDrawElements*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}
  glPolygonOffset*: proc (factor: GLfloat, units: GLfloat) {.stdcall.}
  glCopyTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}
  glCopyTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}
  glCopyTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glCopyTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glBindTexture*: proc (target: GLenum, texture: GLuint) {.stdcall.}
  glDeleteTextures*: proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}
  glGenTextures*: proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}
  glIsTexture*: proc (texture: GLuint): GLboolean {.stdcall.}
  glDrawRangeElements*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}
  glTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glCopyTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glActiveTexture*: proc (texture: GLenum) {.stdcall.}
  glSampleCoverage*: proc (value: GLfloat, invert: GLboolean) {.stdcall.}
  glCompressedTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glGetCompressedTexImage*: proc (target: GLenum, level: GLint, img: pointer) {.stdcall.}
  glBlendFuncSeparate*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}
  glMultiDrawArrays*: proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.stdcall.}
  glMultiDrawElements*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.stdcall.}
  glPointParameterf*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glPointParameterfv*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glPointParameteri*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glPointParameteriv*: proc (pname: GLenum, params: ptr GLint) {.stdcall.}
  glBlendColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}
  glBlendEquation*: proc (mode: GLenum) {.stdcall.}
  glGenQueries*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glDeleteQueries*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glIsQuery*: proc (id: GLuint): GLboolean {.stdcall.}
  glBeginQuery*: proc (target: GLenum, id: GLuint) {.stdcall.}
  glEndQuery*: proc (target: GLenum) {.stdcall.}
  glGetQueryiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetQueryObjectiv*: proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetQueryObjectuiv*: proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glBindBuffer*: proc (target: GLenum, buffer: GLuint) {.stdcall.}
  glDeleteBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glGenBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glIsBuffer*: proc (buffer: GLuint): GLboolean {.stdcall.}
  glBufferData*: proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}
  glBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glGetBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glMapBuffer*: proc (target: GLenum, access: GLenum): pointer {.stdcall.}
  glUnmapBuffer*: proc (target: GLenum): GLboolean {.stdcall.}
  glGetBufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetBufferPointerv*: proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}
  glBlendEquationSeparate*: proc (modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}
  glDrawBuffers*: proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}
  glStencilOpSeparate*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.stdcall.}
  glStencilFuncSeparate*: proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}
  glStencilMaskSeparate*: proc (face: GLenum, mask: GLuint) {.stdcall.}
  glAttachShader*: proc (program: GLuint, shader: GLuint) {.stdcall.}
  glBindAttribLocation*: proc (program: GLuint, index: GLuint, name: cstring) {.stdcall.}
  glCompileShader*: proc (shader: GLuint) {.stdcall.}
  glCreateProgram*: proc (): GLuint {.stdcall.}
  glCreateShader*: proc (`type`: GLenum): GLuint {.stdcall.}
  glDeleteProgram*: proc (program: GLuint) {.stdcall.}
  glDeleteShader*: proc (shader: GLuint) {.stdcall.}
  glDetachShader*: proc (program: GLuint, shader: GLuint) {.stdcall.}
  glDisableVertexAttribArray*: proc (index: GLuint) {.stdcall.}
  glEnableVertexAttribArray*: proc (index: GLuint) {.stdcall.}
  glGetActiveAttrib*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glGetActiveUniform*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glGetAttachedShaders*: proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.stdcall.}
  glGetAttribLocation*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glGetProgramiv*: proc (program: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetProgramInfoLog*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}
  glGetShaderiv*: proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetShaderInfoLog*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}
  glGetShaderSource*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.stdcall.}
  glGetUniformLocation*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glGetUniformfv*: proc (program: GLuint, location: GLint, params: ptr GLfloat) {.stdcall.}
  glGetUniformiv*: proc (program: GLuint, location: GLint, params: ptr GLint) {.stdcall.}
  glGetVertexAttribdv*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glGetVertexAttribfv*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetVertexAttribiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribPointerv*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}
  glIsProgram*: proc (program: GLuint): GLboolean {.stdcall.}
  glIsShader*: proc (shader: GLuint): GLboolean {.stdcall.}
  glLinkProgram*: proc (program: GLuint) {.stdcall.}
  glShaderSource*: proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.stdcall.}
  glUseProgram*: proc (program: GLuint) {.stdcall.}
  glUniform1f*: proc (location: GLint, v0: GLfloat) {.stdcall.}
  glUniform2f*: proc (location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}
  glUniform3f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}
  glUniform4f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}
  glUniform1i*: proc (location: GLint, v0: GLint) {.stdcall.}
  glUniform2i*: proc (location: GLint, v0: GLint, v1: GLint) {.stdcall.}
  glUniform3i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}
  glUniform4i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}
  glUniform1fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform2fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform3fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform4fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform1iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform2iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform3iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform4iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniformMatrix2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glValidateProgram*: proc (program: GLuint) {.stdcall.}
  glVertexAttrib1d*: proc (index: GLuint, x: GLdouble) {.stdcall.}
  glVertexAttrib1dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib1f*: proc (index: GLuint, x: GLfloat) {.stdcall.}
  glVertexAttrib1fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib1s*: proc (index: GLuint, x: GLshort) {.stdcall.}
  glVertexAttrib1sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib2d*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}
  glVertexAttrib2dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib2f*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}
  glVertexAttrib2fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib2s*: proc (index: GLuint, x: GLshort, y: GLshort) {.stdcall.}
  glVertexAttrib2sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib3d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glVertexAttrib3dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib3f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glVertexAttrib3fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib3s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}
  glVertexAttrib3sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4Nbv*: proc (index: GLuint, v: ptr GLbyte) {.stdcall.}
  glVertexAttrib4Niv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttrib4Nsv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4Nub*: proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.stdcall.}
  glVertexAttrib4Nubv*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttrib4Nuiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttrib4Nusv*: proc (index: GLuint, v: ptr GLushort) {.stdcall.}
  glVertexAttrib4bv*: proc (index: GLuint, v: ptr GLbyte) {.stdcall.}
  glVertexAttrib4d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glVertexAttrib4dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib4f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glVertexAttrib4fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib4iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttrib4s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}
  glVertexAttrib4sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4ubv*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttrib4uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttrib4usv*: proc (index: GLuint, v: ptr GLushort) {.stdcall.}
  glVertexAttribPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.stdcall.}
  glUniformMatrix2x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix2x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glColorMaski*: proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.stdcall.}
  glGetBooleani_v*: proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.stdcall.}
  glGetIntegeri_v*: proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}
  glEnablei*: proc (target: GLenum, index: GLuint) {.stdcall.}
  glDisablei*: proc (target: GLenum, index: GLuint) {.stdcall.}
  glIsEnabledi*: proc (target: GLenum, index: GLuint): GLboolean {.stdcall.}
  glBeginTransformFeedback*: proc (primitiveMode: GLenum) {.stdcall.}
  glEndTransformFeedback*: proc () {.stdcall.}
  glBindBufferRange*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glBindBufferBase*: proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}
  glTransformFeedbackVaryings*: proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.stdcall.}
  glGetTransformFeedbackVarying*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glClampColor*: proc (target: GLenum, clamp: GLenum) {.stdcall.}
  glBeginConditionalRender*: proc (id: GLuint, mode: GLenum) {.stdcall.}
  glEndConditionalRender*: proc () {.stdcall.}
  glVertexAttribIPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glGetVertexAttribIiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribIuiv*: proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glVertexAttribI1i*: proc (index: GLuint, x: GLint) {.stdcall.}
  glVertexAttribI2i*: proc (index: GLuint, x: GLint, y: GLint) {.stdcall.}
  glVertexAttribI3i*: proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.stdcall.}
  glVertexAttribI4i*: proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}
  glVertexAttribI1ui*: proc (index: GLuint, x: GLuint) {.stdcall.}
  glVertexAttribI2ui*: proc (index: GLuint, x: GLuint, y: GLuint) {.stdcall.}
  glVertexAttribI3ui*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.stdcall.}
  glVertexAttribI4ui*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}
  glVertexAttribI1iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI2iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI3iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI4iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI1uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI2uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI3uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI4uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI4bv*: proc (index: GLuint, v: ptr GLbyte) {.stdcall.}
  glVertexAttribI4sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttribI4ubv*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttribI4usv*: proc (index: GLuint, v: ptr GLushort) {.stdcall.}
  glGetUniformuiv*: proc (program: GLuint, location: GLint, params: ptr GLuint) {.stdcall.}
  glBindFragDataLocation*: proc (program: GLuint, color: GLuint, name: cstring) {.stdcall.}
  glGetFragDataLocation*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glUniform1ui*: proc (location: GLint, v0: GLuint) {.stdcall.}
  glUniform2ui*: proc (location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}
  glUniform3ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}
  glUniform4ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}
  glUniform1uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform2uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform3uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform4uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glTexParameterIiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTexParameterIuiv*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glGetTexParameterIiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetTexParameterIuiv*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glClearBufferiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.stdcall.}
  glClearBufferuiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.stdcall.}
  glClearBufferfv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.stdcall.}
  glClearBufferfi*: proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.stdcall.}
  glGetStringi*: proc (name: GLenum, index: GLuint): ptr GLubyte {.stdcall.}
  glIsRenderbuffer*: proc (renderbuffer: GLuint): GLboolean {.stdcall.}
  glBindRenderbuffer*: proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}
  glDeleteRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}
  glGenRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}
  glRenderbufferStorage*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glGetRenderbufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glIsFramebuffer*: proc (framebuffer: GLuint): GLboolean {.stdcall.}
  glBindFramebuffer*: proc (target: GLenum, framebuffer: GLuint) {.stdcall.}
  glDeleteFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}
  glGenFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}
  glCheckFramebufferStatus*: proc (target: GLenum): GLenum {.stdcall.}
  glFramebufferTexture1D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glFramebufferTexture2D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glFramebufferTexture3D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.stdcall.}
  glFramebufferRenderbuffer*: proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}
  glGetFramebufferAttachmentParameteriv*: proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGenerateMipmap*: proc (target: GLenum) {.stdcall.}
  glBlitFramebuffer*: proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}
  glRenderbufferStorageMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glFramebufferTextureLayer*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}
  glMapBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}
  glFlushMappedBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.stdcall.}
  glBindVertexArray*: proc (array: GLuint) {.stdcall.}
  glDeleteVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}
  glGenVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}
  glIsVertexArray*: proc (array: GLuint): GLboolean {.stdcall.}
  glDrawArraysInstanced*: proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.stdcall.}
  glDrawElementsInstanced*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.stdcall.}
  glTexBuffer*: proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}
  glPrimitiveRestartIndex*: proc (index: GLuint) {.stdcall.}
  glCopyBufferSubData*: proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glGetUniformIndices*: proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.stdcall.}
  glGetActiveUniformsiv*: proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetActiveUniformName*: proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.stdcall.}
  glGetUniformBlockIndex*: proc (program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}
  glGetActiveUniformBlockiv*: proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetActiveUniformBlockName*: proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.stdcall.}
  glUniformBlockBinding*: proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.stdcall.}
  glDrawElementsBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}
  glDrawRangeElementsBaseVertex*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}
  glDrawElementsInstancedBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.stdcall.}
  glMultiDrawElementsBaseVertex*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.stdcall.}
  glProvokingVertex*: proc (mode: GLenum) {.stdcall.}
  glFenceSync*: proc (condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}
  glIsSync*: proc (sync: GLsync): GLboolean {.stdcall.}
  glDeleteSync*: proc (sync: GLsync) {.stdcall.}
  glClientWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}
  glWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.stdcall.}
  glGetInteger64v*: proc (pname: GLenum, data: ptr GLint64) {.stdcall.}
  glGetSynciv*: proc (sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.stdcall.}
  glGetInteger64i_v*: proc (target: GLenum, index: GLuint, data: ptr GLint64) {.stdcall.}
  glGetBufferParameteri64v*: proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.stdcall.}
  glFramebufferTexture*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glTexImage2DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glTexImage3DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glGetMultisamplefv*: proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.stdcall.}
  glSampleMaski*: proc (maskNumber: GLuint, mask: GLbitfield) {.stdcall.}
  glBindFragDataLocationIndexed*: proc (program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring) {.stdcall.}
  glGetFragDataIndex*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glGenSamplers*: proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}
  glDeleteSamplers*: proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}
  glIsSampler*: proc (sampler: GLuint): GLboolean {.stdcall.}
  glBindSampler*: proc (unit: GLuint, sampler: GLuint) {.stdcall.}
  glSamplerParameteri*: proc (sampler: GLuint, pname: GLenum, param: GLint) {.stdcall.}
  glSamplerParameteriv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glSamplerParameterf*: proc (sampler: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}
  glSamplerParameterfv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}
  glSamplerParameterIiv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glSamplerParameterIuiv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLuint) {.stdcall.}
  glGetSamplerParameteriv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetSamplerParameterIiv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetSamplerParameterfv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetSamplerParameterIuiv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glQueryCounter*: proc (id: GLuint, target: GLenum) {.stdcall.}
  glGetQueryObjecti64v*: proc (id: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}
  glGetQueryObjectui64v*: proc (id: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}
  glVertexAttribDivisor*: proc (index: GLuint, divisor: GLuint) {.stdcall.}
  glVertexAttribP1ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}
  glVertexAttribP1uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}
  glVertexAttribP2ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}
  glVertexAttribP2uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}
  glVertexAttribP3ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}
  glVertexAttribP3uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}
  glVertexAttribP4ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}
  glVertexAttribP4uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}
  glVertexP2ui*: proc (`type`: GLenum, value: GLuint) {.stdcall.}
  glVertexP2uiv*: proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}
  glVertexP3ui*: proc (`type`: GLenum, value: GLuint) {.stdcall.}
  glVertexP3uiv*: proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}
  glVertexP4ui*: proc (`type`: GLenum, value: GLuint) {.stdcall.}
  glVertexP4uiv*: proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}
  glTexCoordP1ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glTexCoordP1uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glTexCoordP2ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glTexCoordP2uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glTexCoordP3ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glTexCoordP3uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glTexCoordP4ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glTexCoordP4uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glMultiTexCoordP1ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}
  glMultiTexCoordP1uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glMultiTexCoordP2ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}
  glMultiTexCoordP2uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glMultiTexCoordP3ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}
  glMultiTexCoordP3uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glMultiTexCoordP4ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}
  glMultiTexCoordP4uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glNormalP3ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glNormalP3uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glColorP3ui*: proc (`type`: GLenum, color: GLuint) {.stdcall.}
  glColorP3uiv*: proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}
  glColorP4ui*: proc (`type`: GLenum, color: GLuint) {.stdcall.}
  glColorP4uiv*: proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}
  glSecondaryColorP3ui*: proc (`type`: GLenum, color: GLuint) {.stdcall.}
  glSecondaryColorP3uiv*: proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}
  glMinSampleShading*: proc (value: GLfloat) {.stdcall.}
  glBlendEquationi*: proc (buf: GLuint, mode: GLenum) {.stdcall.}
  glBlendEquationSeparatei*: proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}
  glBlendFunci*: proc (buf: GLuint, src: GLenum, dst: GLenum) {.stdcall.}
  glBlendFuncSeparatei*: proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.stdcall.}
  glDrawArraysIndirect*: proc (mode: GLenum, indirect: pointer) {.stdcall.}
  glDrawElementsIndirect*: proc (mode: GLenum, `type`: GLenum, indirect: pointer) {.stdcall.}
  glUniform1d*: proc (location: GLint, x: GLdouble) {.stdcall.}
  glUniform2d*: proc (location: GLint, x: GLdouble, y: GLdouble) {.stdcall.}
  glUniform3d*: proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glUniform4d*: proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glUniform1dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glUniform2dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glUniform3dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glUniform4dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix2dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix3dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix4dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix2x3dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix2x4dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix3x2dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix3x4dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix4x2dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix4x3dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glGetUniformdv*: proc (program: GLuint, location: GLint, params: ptr GLdouble) {.stdcall.}
  glGetSubroutineUniformLocation*: proc (program: GLuint, shadertype: GLenum, name: cstring): GLint {.stdcall.}
  glGetSubroutineIndex*: proc (program: GLuint, shadertype: GLenum, name: cstring): GLuint {.stdcall.}
  glGetActiveSubroutineUniformiv*: proc (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint) {.stdcall.}
  glGetActiveSubroutineUniformName*: proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}
  glGetActiveSubroutineName*: proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}
  glUniformSubroutinesuiv*: proc (shadertype: GLenum, count: GLsizei, indices: ptr GLuint) {.stdcall.}
  glGetUniformSubroutineuiv*: proc (shadertype: GLenum, location: GLint, params: ptr GLuint) {.stdcall.}
  glGetProgramStageiv*: proc (program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint) {.stdcall.}
  glPatchParameteri*: proc (pname: GLenum, value: GLint) {.stdcall.}
  glPatchParameterfv*: proc (pname: GLenum, values: ptr GLfloat) {.stdcall.}
  glBindTransformFeedback*: proc (target: GLenum, id: GLuint) {.stdcall.}
  glDeleteTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glGenTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glIsTransformFeedback*: proc (id: GLuint): GLboolean {.stdcall.}
  glPauseTransformFeedback*: proc () {.stdcall.}
  glResumeTransformFeedback*: proc () {.stdcall.}
  glDrawTransformFeedback*: proc (mode: GLenum, id: GLuint) {.stdcall.}
  glDrawTransformFeedbackStream*: proc (mode: GLenum, id: GLuint, stream: GLuint) {.stdcall.}
  glBeginQueryIndexed*: proc (target: GLenum, index: GLuint, id: GLuint) {.stdcall.}
  glEndQueryIndexed*: proc (target: GLenum, index: GLuint) {.stdcall.}
  glGetQueryIndexediv*: proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glReleaseShaderCompiler*: proc () {.stdcall.}
  glShaderBinary*: proc (count: GLsizei, shaders: ptr GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}
  glGetShaderPrecisionFormat*: proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.stdcall.}
  glDepthRangef*: proc (n: GLfloat, f: GLfloat) {.stdcall.}
  glClearDepthf*: proc (d: GLfloat) {.stdcall.}
  glGetProgramBinary*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer) {.stdcall.}
  glProgramBinary*: proc (program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}
  glProgramParameteri*: proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}
  glUseProgramStages*: proc (pipeline: GLuint, stages: GLbitfield, program: GLuint) {.stdcall.}
  glActiveShaderProgram*: proc (pipeline: GLuint, program: GLuint) {.stdcall.}
  glCreateShaderProgramv*: proc (`type`: GLenum, count: GLsizei, strings: cstringArray): GLuint {.stdcall.}
  glBindProgramPipeline*: proc (pipeline: GLuint) {.stdcall.}
  glDeleteProgramPipelines*: proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}
  glGenProgramPipelines*: proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}
  glIsProgramPipeline*: proc (pipeline: GLuint): GLboolean {.stdcall.}
  glGetProgramPipelineiv*: proc (pipeline: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glProgramUniform1i*: proc (program: GLuint, location: GLint, v0: GLint) {.stdcall.}
  glProgramUniform1iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform1f*: proc (program: GLuint, location: GLint, v0: GLfloat) {.stdcall.}
  glProgramUniform1fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform1d*: proc (program: GLuint, location: GLint, v0: GLdouble) {.stdcall.}
  glProgramUniform1dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform1ui*: proc (program: GLuint, location: GLint, v0: GLuint) {.stdcall.}
  glProgramUniform1uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniform2i*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.stdcall.}
  glProgramUniform2iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform2f*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}
  glProgramUniform2fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform2d*: proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) {.stdcall.}
  glProgramUniform2dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform2ui*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}
  glProgramUniform2uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniform3i*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}
  glProgramUniform3iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform3f*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}
  glProgramUniform3fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform3d*: proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) {.stdcall.}
  glProgramUniform3dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform3ui*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}
  glProgramUniform3uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniform4i*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}
  glProgramUniform4iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform4f*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}
  glProgramUniform4fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform4d*: proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) {.stdcall.}
  glProgramUniform4dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform4ui*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}
  glProgramUniform4uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniformMatrix2fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix3fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix4fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix2dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix3dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix4dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix2x3fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix3x2fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix2x4fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix4x2fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix3x4fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix4x3fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix2x3dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix3x2dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix2x4dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix4x2dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix3x4dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix4x3dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glValidateProgramPipeline*: proc (pipeline: GLuint) {.stdcall.}
  glGetProgramPipelineInfoLog*: proc (pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}
  glVertexAttribL1d*: proc (index: GLuint, x: GLdouble) {.stdcall.}
  glVertexAttribL2d*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}
  glVertexAttribL3d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glVertexAttribL4d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glVertexAttribL1dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribL2dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribL3dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribL4dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribLPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glGetVertexAttribLdv*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glViewportArrayv*: proc (first: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glViewportIndexedf*: proc (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) {.stdcall.}
  glViewportIndexedfv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glScissorArrayv*: proc (first: GLuint, count: GLsizei, v: ptr GLint) {.stdcall.}
  glScissorIndexed*: proc (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glScissorIndexedv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glDepthRangeArrayv*: proc (first: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}
  glDepthRangeIndexed*: proc (index: GLuint, n: GLdouble, f: GLdouble) {.stdcall.}
  glGetFloati_v*: proc (target: GLenum, index: GLuint, data: ptr GLfloat) {.stdcall.}
  glGetDoublei_v*: proc (target: GLenum, index: GLuint, data: ptr GLdouble) {.stdcall.}


# Extensions
var
  GLAD_GL_ARB_shading_language_420pack*: bool



proc hasExt(extname: string): bool =
  if extname.len == 0:
    return false

  if glVersionMajor < 3:
    var extensions = $cast[cstring](glGetString(GL_EXTENSIONS))
    if extensions.len == 0:
      return false

    var
      loc, terminatorLoc: int
      terminator: char

    while true:
      loc = extensions.find(extname)
      if loc < 0:
        return false

      terminatorLoc = loc + extname.len
      terminator = extensions[terminatorLoc]

      if (loc == 0 or extensions[loc - 1] == ' ') and
         (terminator == ' ' or terminator == '\0'):
        return true

      extensions = extensions[terminatorLoc..^1]

  else:
    var
      num: GLint
      s: cstring

    glGetIntegerv(GL_NUM_EXTENSIONS, num.addr)

    for i in 0..num-1:
      s = cast[cstring](glGetStringi(GL_EXTENSIONS, GLuint(i)))
      if s == extname:
        return true


proc load_GL_VERSION_1_0(load: proc) =
  if not GLAD_GL_VERSION_1_0: return

  glCullFace = cast[proc (mode: GLenum) {.stdcall.}](load("glCullFace"))
  glFrontFace = cast[proc (mode: GLenum) {.stdcall.}](load("glFrontFace"))
  glHint = cast[proc (target: GLenum, mode: GLenum) {.stdcall.}](load("glHint"))
  glLineWidth = cast[proc (width: GLfloat) {.stdcall.}](load("glLineWidth"))
  glPointSize = cast[proc (size: GLfloat) {.stdcall.}](load("glPointSize"))
  glPolygonMode = cast[proc (face: GLenum, mode: GLenum) {.stdcall.}](load("glPolygonMode"))
  glScissor = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glScissor"))
  glTexParameterf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glTexParameterf"))
  glTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glTexParameterfv"))
  glTexParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glTexParameteri"))
  glTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTexParameteriv"))
  glTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage1D"))
  glTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage2D"))
  glDrawBuffer = cast[proc (buf: GLenum) {.stdcall.}](load("glDrawBuffer"))
  glClear = cast[proc (mask: GLbitfield) {.stdcall.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}](load("glClearColor"))
  glClearStencil = cast[proc (s: GLint) {.stdcall.}](load("glClearStencil"))
  glClearDepth = cast[proc (depth: GLdouble) {.stdcall.}](load("glClearDepth"))
  glStencilMask = cast[proc (mask: GLuint) {.stdcall.}](load("glStencilMask"))
  glColorMask = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.stdcall.}](load("glColorMask"))
  glDepthMask = cast[proc (flag: GLboolean) {.stdcall.}](load("glDepthMask"))
  glDisable = cast[proc (cap: GLenum) {.stdcall.}](load("glDisable"))
  glEnable = cast[proc (cap: GLenum) {.stdcall.}](load("glEnable"))
  glFinish = cast[proc () {.stdcall.}](load("glFinish"))
  glFlush = cast[proc () {.stdcall.}](load("glFlush"))
  glBlendFunc = cast[proc (sfactor: GLenum, dfactor: GLenum) {.stdcall.}](load("glBlendFunc"))
  glLogicOp = cast[proc (opcode: GLenum) {.stdcall.}](load("glLogicOp"))
  glStencilFunc = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}](load("glStencilFunc"))
  glStencilOp = cast[proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.stdcall.}](load("glStencilOp"))
  glDepthFunc = cast[proc (`func`: GLenum) {.stdcall.}](load("glDepthFunc"))
  glPixelStoref = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glPixelStoref"))
  glPixelStorei = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glPixelStorei"))
  glReadBuffer = cast[proc (src: GLenum) {.stdcall.}](load("glReadBuffer"))
  glReadPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glReadPixels"))
  glGetBooleanv = cast[proc (pname: GLenum, data: ptr GLboolean) {.stdcall.}](load("glGetBooleanv"))
  glGetDoublev = cast[proc (pname: GLenum, data: ptr GLdouble) {.stdcall.}](load("glGetDoublev"))
  glGetError = cast[proc (): GLenum {.stdcall.}](load("glGetError"))
  glGetFloatv = cast[proc (pname: GLenum, data: ptr GLfloat) {.stdcall.}](load("glGetFloatv"))
  glGetIntegerv = cast[proc (pname: GLenum, data: ptr GLint) {.stdcall.}](load("glGetIntegerv"))
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.stdcall.}](load("glGetString"))
  glGetTexImage = cast[proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glGetTexImage"))
  glGetTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTexParameteriv"))
  glGetTexLevelParameterfv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTexLevelParameterfv"))
  glGetTexLevelParameteriv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTexLevelParameteriv"))
  glIsEnabled = cast[proc (cap: GLenum): GLboolean {.stdcall.}](load("glIsEnabled"))
  glDepthRange = cast[proc (n: GLdouble, f: GLdouble) {.stdcall.}](load("glDepthRange"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glViewport"))


proc load_GL_VERSION_1_1(load: proc) =
  if not GLAD_GL_VERSION_1_1: return

  glDrawArrays = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}](load("glDrawArrays"))
  glDrawElements = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}](load("glDrawElements"))
  glPolygonOffset = cast[proc (factor: GLfloat, units: GLfloat) {.stdcall.}](load("glPolygonOffset"))
  glCopyTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}](load("glCopyTexImage1D"))
  glCopyTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}](load("glCopyTexImage2D"))
  glCopyTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyTexSubImage1D"))
  glCopyTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTexSubImage2D"))
  glTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage1D"))
  glTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage2D"))
  glBindTexture = cast[proc (target: GLenum, texture: GLuint) {.stdcall.}](load("glBindTexture"))
  glDeleteTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glDeleteTextures"))
  glGenTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glGenTextures"))
  glIsTexture = cast[proc (texture: GLuint): GLboolean {.stdcall.}](load("glIsTexture"))


proc load_GL_VERSION_1_2(load: proc) =
  if not GLAD_GL_VERSION_1_2: return

  glDrawRangeElements = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}](load("glDrawRangeElements"))
  glTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage3D"))
  glTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage3D"))
  glCopyTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTexSubImage3D"))


proc load_GL_VERSION_1_3(load: proc) =
  if not GLAD_GL_VERSION_1_3: return

  glActiveTexture = cast[proc (texture: GLenum) {.stdcall.}](load("glActiveTexture"))
  glSampleCoverage = cast[proc (value: GLfloat, invert: GLboolean) {.stdcall.}](load("glSampleCoverage"))
  glCompressedTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage3D"))
  glCompressedTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage2D"))
  glCompressedTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage1D"))
  glCompressedTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage3D"))
  glCompressedTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage2D"))
  glCompressedTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage1D"))
  glGetCompressedTexImage = cast[proc (target: GLenum, level: GLint, img: pointer) {.stdcall.}](load("glGetCompressedTexImage"))


proc load_GL_VERSION_1_4(load: proc) =
  if not GLAD_GL_VERSION_1_4: return

  glBlendFuncSeparate = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}](load("glBlendFuncSeparate"))
  glMultiDrawArrays = cast[proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.stdcall.}](load("glMultiDrawArrays"))
  glMultiDrawElements = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.stdcall.}](load("glMultiDrawElements"))
  glPointParameterf = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glPointParameterf"))
  glPointParameterfv = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glPointParameterfv"))
  glPointParameteri = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glPointParameteri"))
  glPointParameteriv = cast[proc (pname: GLenum, params: ptr GLint) {.stdcall.}](load("glPointParameteriv"))
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.stdcall.}](load("glBlendEquation"))


proc load_GL_VERSION_1_5(load: proc) =
  if not GLAD_GL_VERSION_1_5: return

  glGenQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenQueries"))
  glDeleteQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteQueries"))
  glIsQuery = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsQuery"))
  glBeginQuery = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBeginQuery"))
  glEndQuery = cast[proc (target: GLenum) {.stdcall.}](load("glEndQuery"))
  glGetQueryiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryiv"))
  glGetQueryObjectiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryObjectiv"))
  glGetQueryObjectuiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetQueryObjectuiv"))
  glBindBuffer = cast[proc (target: GLenum, buffer: GLuint) {.stdcall.}](load("glBindBuffer"))
  glDeleteBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glDeleteBuffers"))
  glGenBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glGenBuffers"))
  glIsBuffer = cast[proc (buffer: GLuint): GLboolean {.stdcall.}](load("glIsBuffer"))
  glBufferData = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}](load("glBufferData"))
  glBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glBufferSubData"))
  glGetBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glGetBufferSubData"))
  glMapBuffer = cast[proc (target: GLenum, access: GLenum): pointer {.stdcall.}](load("glMapBuffer"))
  glUnmapBuffer = cast[proc (target: GLenum): GLboolean {.stdcall.}](load("glUnmapBuffer"))
  glGetBufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetBufferParameteriv"))
  glGetBufferPointerv = cast[proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetBufferPointerv"))


proc load_GL_VERSION_2_0(load: proc) =
  if not GLAD_GL_VERSION_2_0: return

  glBlendEquationSeparate = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}](load("glBlendEquationSeparate"))
  glDrawBuffers = cast[proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}](load("glDrawBuffers"))
  glStencilOpSeparate = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.stdcall.}](load("glStencilOpSeparate"))
  glStencilFuncSeparate = cast[proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}](load("glStencilFuncSeparate"))
  glStencilMaskSeparate = cast[proc (face: GLenum, mask: GLuint) {.stdcall.}](load("glStencilMaskSeparate"))
  glAttachShader = cast[proc (program: GLuint, shader: GLuint) {.stdcall.}](load("glAttachShader"))
  glBindAttribLocation = cast[proc (program: GLuint, index: GLuint, name: cstring) {.stdcall.}](load("glBindAttribLocation"))
  glCompileShader = cast[proc (shader: GLuint) {.stdcall.}](load("glCompileShader"))
  glCreateProgram = cast[proc (): GLuint {.stdcall.}](load("glCreateProgram"))
  glCreateShader = cast[proc (`type`: GLenum): GLuint {.stdcall.}](load("glCreateShader"))
  glDeleteProgram = cast[proc (program: GLuint) {.stdcall.}](load("glDeleteProgram"))
  glDeleteShader = cast[proc (shader: GLuint) {.stdcall.}](load("glDeleteShader"))
  glDetachShader = cast[proc (program: GLuint, shader: GLuint) {.stdcall.}](load("glDetachShader"))
  glDisableVertexAttribArray = cast[proc (index: GLuint) {.stdcall.}](load("glDisableVertexAttribArray"))
  glEnableVertexAttribArray = cast[proc (index: GLuint) {.stdcall.}](load("glEnableVertexAttribArray"))
  glGetActiveAttrib = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetActiveAttrib"))
  glGetActiveUniform = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.stdcall.}](load("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetAttribLocation"))
  glGetProgramiv = cast[proc (program: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramiv"))
  glGetProgramInfoLog = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetProgramInfoLog"))
  glGetShaderiv = cast[proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetShaderiv"))
  glGetShaderInfoLog = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetShaderInfoLog"))
  glGetShaderSource = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.stdcall.}](load("glGetShaderSource"))
  glGetUniformLocation = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetUniformLocation"))
  glGetUniformfv = cast[proc (program: GLuint, location: GLint, params: ptr GLfloat) {.stdcall.}](load("glGetUniformfv"))
  glGetUniformiv = cast[proc (program: GLuint, location: GLint, params: ptr GLint) {.stdcall.}](load("glGetUniformiv"))
  glGetVertexAttribdv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVertexAttribdv"))
  glGetVertexAttribfv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetVertexAttribfv"))
  glGetVertexAttribiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}](load("glGetVertexAttribPointerv"))
  glIsProgram = cast[proc (program: GLuint): GLboolean {.stdcall.}](load("glIsProgram"))
  glIsShader = cast[proc (shader: GLuint): GLboolean {.stdcall.}](load("glIsShader"))
  glLinkProgram = cast[proc (program: GLuint) {.stdcall.}](load("glLinkProgram"))
  glShaderSource = cast[proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.stdcall.}](load("glShaderSource"))
  glUseProgram = cast[proc (program: GLuint) {.stdcall.}](load("glUseProgram"))
  glUniform1f = cast[proc (location: GLint, v0: GLfloat) {.stdcall.}](load("glUniform1f"))
  glUniform2f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}](load("glUniform2f"))
  glUniform3f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}](load("glUniform3f"))
  glUniform4f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}](load("glUniform4f"))
  glUniform1i = cast[proc (location: GLint, v0: GLint) {.stdcall.}](load("glUniform1i"))
  glUniform2i = cast[proc (location: GLint, v0: GLint, v1: GLint) {.stdcall.}](load("glUniform2i"))
  glUniform3i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}](load("glUniform3i"))
  glUniform4i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}](load("glUniform4i"))
  glUniform1fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform1fv"))
  glUniform2fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform2fv"))
  glUniform3fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform3fv"))
  glUniform4fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform4fv"))
  glUniform1iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform1iv"))
  glUniform2iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform2iv"))
  glUniform3iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform3iv"))
  glUniform4iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform4iv"))
  glUniformMatrix2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2fv"))
  glUniformMatrix3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3fv"))
  glUniformMatrix4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4fv"))
  glValidateProgram = cast[proc (program: GLuint) {.stdcall.}](load("glValidateProgram"))
  glVertexAttrib1d = cast[proc (index: GLuint, x: GLdouble) {.stdcall.}](load("glVertexAttrib1d"))
  glVertexAttrib1dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib1dv"))
  glVertexAttrib1f = cast[proc (index: GLuint, x: GLfloat) {.stdcall.}](load("glVertexAttrib1f"))
  glVertexAttrib1fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib1fv"))
  glVertexAttrib1s = cast[proc (index: GLuint, x: GLshort) {.stdcall.}](load("glVertexAttrib1s"))
  glVertexAttrib1sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib1sv"))
  glVertexAttrib2d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexAttrib2d"))
  glVertexAttrib2dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib2dv"))
  glVertexAttrib2f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}](load("glVertexAttrib2f"))
  glVertexAttrib2fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib2fv"))
  glVertexAttrib2s = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.stdcall.}](load("glVertexAttrib2s"))
  glVertexAttrib2sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib2sv"))
  glVertexAttrib3d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexAttrib3d"))
  glVertexAttrib3dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib3dv"))
  glVertexAttrib3f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glVertexAttrib3f"))
  glVertexAttrib3fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib3fv"))
  glVertexAttrib3s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}](load("glVertexAttrib3s"))
  glVertexAttrib3sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib3sv"))
  glVertexAttrib4Nbv = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttrib4Nbv"))
  glVertexAttrib4Niv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttrib4Niv"))
  glVertexAttrib4Nsv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib4Nsv"))
  glVertexAttrib4Nub = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.stdcall.}](load("glVertexAttrib4Nub"))
  glVertexAttrib4Nubv = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttrib4Nubv"))
  glVertexAttrib4Nuiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttrib4Nuiv"))
  glVertexAttrib4Nusv = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttrib4Nusv"))
  glVertexAttrib4bv = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttrib4bv"))
  glVertexAttrib4d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexAttrib4d"))
  glVertexAttrib4dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib4dv"))
  glVertexAttrib4f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glVertexAttrib4f"))
  glVertexAttrib4fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib4fv"))
  glVertexAttrib4iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttrib4iv"))
  glVertexAttrib4s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}](load("glVertexAttrib4s"))
  glVertexAttrib4sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib4sv"))
  glVertexAttrib4ubv = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttrib4ubv"))
  glVertexAttrib4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttrib4uiv"))
  glVertexAttrib4usv = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttrib4usv"))
  glVertexAttribPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribPointer"))


proc load_GL_VERSION_2_1(load: proc) =
  if not GLAD_GL_VERSION_2_1: return

  glUniformMatrix2x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2x3fv"))
  glUniformMatrix3x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3x2fv"))
  glUniformMatrix2x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2x4fv"))
  glUniformMatrix4x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4x2fv"))
  glUniformMatrix3x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3x4fv"))
  glUniformMatrix4x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4x3fv"))


proc load_GL_VERSION_3_0(load: proc) =
  if not GLAD_GL_VERSION_3_0: return

  glColorMaski = cast[proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.stdcall.}](load("glColorMaski"))
  glGetBooleani_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.stdcall.}](load("glGetBooleani_v"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}](load("glGetIntegeri_v"))
  glEnablei = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glEnablei"))
  glDisablei = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glDisablei"))
  glIsEnabledi = cast[proc (target: GLenum, index: GLuint): GLboolean {.stdcall.}](load("glIsEnabledi"))
  glBeginTransformFeedback = cast[proc (primitiveMode: GLenum) {.stdcall.}](load("glBeginTransformFeedback"))
  glEndTransformFeedback = cast[proc () {.stdcall.}](load("glEndTransformFeedback"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}](load("glBindBufferBase"))
  glTransformFeedbackVaryings = cast[proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.stdcall.}](load("glTransformFeedbackVaryings"))
  glGetTransformFeedbackVarying = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetTransformFeedbackVarying"))
  glClampColor = cast[proc (target: GLenum, clamp: GLenum) {.stdcall.}](load("glClampColor"))
  glBeginConditionalRender = cast[proc (id: GLuint, mode: GLenum) {.stdcall.}](load("glBeginConditionalRender"))
  glEndConditionalRender = cast[proc () {.stdcall.}](load("glEndConditionalRender"))
  glVertexAttribIPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribIPointer"))
  glGetVertexAttribIiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribIiv"))
  glGetVertexAttribIuiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetVertexAttribIuiv"))
  glVertexAttribI1i = cast[proc (index: GLuint, x: GLint) {.stdcall.}](load("glVertexAttribI1i"))
  glVertexAttribI2i = cast[proc (index: GLuint, x: GLint, y: GLint) {.stdcall.}](load("glVertexAttribI2i"))
  glVertexAttribI3i = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.stdcall.}](load("glVertexAttribI3i"))
  glVertexAttribI4i = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glVertexAttribI4i"))
  glVertexAttribI1ui = cast[proc (index: GLuint, x: GLuint) {.stdcall.}](load("glVertexAttribI1ui"))
  glVertexAttribI2ui = cast[proc (index: GLuint, x: GLuint, y: GLuint) {.stdcall.}](load("glVertexAttribI2ui"))
  glVertexAttribI3ui = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.stdcall.}](load("glVertexAttribI3ui"))
  glVertexAttribI4ui = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}](load("glVertexAttribI4ui"))
  glVertexAttribI1iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI1iv"))
  glVertexAttribI2iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI2iv"))
  glVertexAttribI3iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI3iv"))
  glVertexAttribI4iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI4iv"))
  glVertexAttribI1uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI1uiv"))
  glVertexAttribI2uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI2uiv"))
  glVertexAttribI3uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI3uiv"))
  glVertexAttribI4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI4uiv"))
  glVertexAttribI4bv = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttribI4bv"))
  glVertexAttribI4sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttribI4sv"))
  glVertexAttribI4ubv = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttribI4ubv"))
  glVertexAttribI4usv = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttribI4usv"))
  glGetUniformuiv = cast[proc (program: GLuint, location: GLint, params: ptr GLuint) {.stdcall.}](load("glGetUniformuiv"))
  glBindFragDataLocation = cast[proc (program: GLuint, color: GLuint, name: cstring) {.stdcall.}](load("glBindFragDataLocation"))
  glGetFragDataLocation = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetFragDataLocation"))
  glUniform1ui = cast[proc (location: GLint, v0: GLuint) {.stdcall.}](load("glUniform1ui"))
  glUniform2ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}](load("glUniform2ui"))
  glUniform3ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}](load("glUniform3ui"))
  glUniform4ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}](load("glUniform4ui"))
  glUniform1uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform1uiv"))
  glUniform2uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform2uiv"))
  glUniform3uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform3uiv"))
  glUniform4uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform4uiv"))
  glTexParameterIiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTexParameterIiv"))
  glTexParameterIuiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glTexParameterIuiv"))
  glGetTexParameterIiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTexParameterIiv"))
  glGetTexParameterIuiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetTexParameterIuiv"))
  glClearBufferiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.stdcall.}](load("glClearBufferiv"))
  glClearBufferuiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.stdcall.}](load("glClearBufferuiv"))
  glClearBufferfv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.stdcall.}](load("glClearBufferfv"))
  glClearBufferfi = cast[proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.stdcall.}](load("glClearBufferfi"))
  glGetStringi = cast[proc (name: GLenum, index: GLuint): ptr GLubyte {.stdcall.}](load("glGetStringi"))
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.stdcall.}](load("glIsRenderbuffer"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glBindRenderbuffer"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glDeleteRenderbuffers"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glGenRenderbuffers"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorage"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetRenderbufferParameteriv"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.stdcall.}](load("glIsFramebuffer"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.stdcall.}](load("glBindFramebuffer"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glDeleteFramebuffers"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glGenFramebuffers"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.stdcall.}](load("glCheckFramebufferStatus"))
  glFramebufferTexture1D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture1D"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture2D"))
  glFramebufferTexture3D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.stdcall.}](load("glFramebufferTexture3D"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glFramebufferRenderbuffer"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFramebufferAttachmentParameteriv"))
  glGenerateMipmap = cast[proc (target: GLenum) {.stdcall.}](load("glGenerateMipmap"))
  glBlitFramebuffer = cast[proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}](load("glBlitFramebuffer"))
  glRenderbufferStorageMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorageMultisample"))
  glFramebufferTextureLayer = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glFramebufferTextureLayer"))
  glMapBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](load("glMapBufferRange"))
  glFlushMappedBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.stdcall.}](load("glFlushMappedBufferRange"))
  glBindVertexArray = cast[proc (array: GLuint) {.stdcall.}](load("glBindVertexArray"))
  glDeleteVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glDeleteVertexArrays"))
  glGenVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glGenVertexArrays"))
  glIsVertexArray = cast[proc (array: GLuint): GLboolean {.stdcall.}](load("glIsVertexArray"))


proc load_GL_VERSION_3_1(load: proc) =
  if not GLAD_GL_VERSION_3_1: return

  glDrawArraysInstanced = cast[proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.stdcall.}](load("glDrawArraysInstanced"))
  glDrawElementsInstanced = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.stdcall.}](load("glDrawElementsInstanced"))
  glTexBuffer = cast[proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}](load("glTexBuffer"))
  glPrimitiveRestartIndex = cast[proc (index: GLuint) {.stdcall.}](load("glPrimitiveRestartIndex"))
  glCopyBufferSubData = cast[proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glCopyBufferSubData"))
  glGetUniformIndices = cast[proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.stdcall.}](load("glGetUniformIndices"))
  glGetActiveUniformsiv = cast[proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveUniformsiv"))
  glGetActiveUniformName = cast[proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.stdcall.}](load("glGetActiveUniformName"))
  glGetUniformBlockIndex = cast[proc (program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}](load("glGetUniformBlockIndex"))
  glGetActiveUniformBlockiv = cast[proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveUniformBlockiv"))
  glGetActiveUniformBlockName = cast[proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.stdcall.}](load("glGetActiveUniformBlockName"))
  glUniformBlockBinding = cast[proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.stdcall.}](load("glUniformBlockBinding"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}](load("glBindBufferBase"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}](load("glGetIntegeri_v"))


proc load_GL_VERSION_3_2(load: proc) =
  if not GLAD_GL_VERSION_3_2: return

  glDrawElementsBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}](load("glDrawElementsBaseVertex"))
  glDrawRangeElementsBaseVertex = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}](load("glDrawRangeElementsBaseVertex"))
  glDrawElementsInstancedBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.stdcall.}](load("glDrawElementsInstancedBaseVertex"))
  glMultiDrawElementsBaseVertex = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.stdcall.}](load("glMultiDrawElementsBaseVertex"))
  glProvokingVertex = cast[proc (mode: GLenum) {.stdcall.}](load("glProvokingVertex"))
  glFenceSync = cast[proc (condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}](load("glFenceSync"))
  glIsSync = cast[proc (sync: GLsync): GLboolean {.stdcall.}](load("glIsSync"))
  glDeleteSync = cast[proc (sync: GLsync) {.stdcall.}](load("glDeleteSync"))
  glClientWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}](load("glClientWaitSync"))
  glWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.stdcall.}](load("glWaitSync"))
  glGetInteger64v = cast[proc (pname: GLenum, data: ptr GLint64) {.stdcall.}](load("glGetInteger64v"))
  glGetSynciv = cast[proc (sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.stdcall.}](load("glGetSynciv"))
  glGetInteger64i_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint64) {.stdcall.}](load("glGetInteger64i_v"))
  glGetBufferParameteri64v = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glGetBufferParameteri64v"))
  glFramebufferTexture = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture"))
  glTexImage2DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexImage2DMultisample"))
  glTexImage3DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexImage3DMultisample"))
  glGetMultisamplefv = cast[proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.stdcall.}](load("glGetMultisamplefv"))
  glSampleMaski = cast[proc (maskNumber: GLuint, mask: GLbitfield) {.stdcall.}](load("glSampleMaski"))


proc load_GL_VERSION_3_3(load: proc) =
  if not GLAD_GL_VERSION_3_3: return

  glBindFragDataLocationIndexed = cast[proc (program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring) {.stdcall.}](load("glBindFragDataLocationIndexed"))
  glGetFragDataIndex = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetFragDataIndex"))
  glGenSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glGenSamplers"))
  glDeleteSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glDeleteSamplers"))
  glIsSampler = cast[proc (sampler: GLuint): GLboolean {.stdcall.}](load("glIsSampler"))
  glBindSampler = cast[proc (unit: GLuint, sampler: GLuint) {.stdcall.}](load("glBindSampler"))
  glSamplerParameteri = cast[proc (sampler: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glSamplerParameteri"))
  glSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glSamplerParameteriv"))
  glSamplerParameterf = cast[proc (sampler: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}](load("glSamplerParameterf"))
  glSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}](load("glSamplerParameterfv"))
  glSamplerParameterIiv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glSamplerParameterIiv"))
  glSamplerParameterIuiv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLuint) {.stdcall.}](load("glSamplerParameterIuiv"))
  glGetSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetSamplerParameteriv"))
  glGetSamplerParameterIiv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetSamplerParameterIiv"))
  glGetSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetSamplerParameterfv"))
  glGetSamplerParameterIuiv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetSamplerParameterIuiv"))
  glQueryCounter = cast[proc (id: GLuint, target: GLenum) {.stdcall.}](load("glQueryCounter"))
  glGetQueryObjecti64v = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glGetQueryObjecti64v"))
  glGetQueryObjectui64v = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}](load("glGetQueryObjectui64v"))
  glVertexAttribDivisor = cast[proc (index: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexAttribDivisor"))
  glVertexAttribP1ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP1ui"))
  glVertexAttribP1uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP1uiv"))
  glVertexAttribP2ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP2ui"))
  glVertexAttribP2uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP2uiv"))
  glVertexAttribP3ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP3ui"))
  glVertexAttribP3uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP3uiv"))
  glVertexAttribP4ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP4ui"))
  glVertexAttribP4uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP4uiv"))
  glVertexP2ui = cast[proc (`type`: GLenum, value: GLuint) {.stdcall.}](load("glVertexP2ui"))
  glVertexP2uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}](load("glVertexP2uiv"))
  glVertexP3ui = cast[proc (`type`: GLenum, value: GLuint) {.stdcall.}](load("glVertexP3ui"))
  glVertexP3uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}](load("glVertexP3uiv"))
  glVertexP4ui = cast[proc (`type`: GLenum, value: GLuint) {.stdcall.}](load("glVertexP4ui"))
  glVertexP4uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}](load("glVertexP4uiv"))
  glTexCoordP1ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP1ui"))
  glTexCoordP1uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP1uiv"))
  glTexCoordP2ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP2ui"))
  glTexCoordP2uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP2uiv"))
  glTexCoordP3ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP3ui"))
  glTexCoordP3uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP3uiv"))
  glTexCoordP4ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP4ui"))
  glTexCoordP4uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP4uiv"))
  glMultiTexCoordP1ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP1ui"))
  glMultiTexCoordP1uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP1uiv"))
  glMultiTexCoordP2ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP2ui"))
  glMultiTexCoordP2uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP2uiv"))
  glMultiTexCoordP3ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP3ui"))
  glMultiTexCoordP3uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP3uiv"))
  glMultiTexCoordP4ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP4ui"))
  glMultiTexCoordP4uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP4uiv"))
  glNormalP3ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glNormalP3ui"))
  glNormalP3uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glNormalP3uiv"))
  glColorP3ui = cast[proc (`type`: GLenum, color: GLuint) {.stdcall.}](load("glColorP3ui"))
  glColorP3uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}](load("glColorP3uiv"))
  glColorP4ui = cast[proc (`type`: GLenum, color: GLuint) {.stdcall.}](load("glColorP4ui"))
  glColorP4uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}](load("glColorP4uiv"))
  glSecondaryColorP3ui = cast[proc (`type`: GLenum, color: GLuint) {.stdcall.}](load("glSecondaryColorP3ui"))
  glSecondaryColorP3uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}](load("glSecondaryColorP3uiv"))


proc load_GL_VERSION_4_0(load: proc) =
  if not GLAD_GL_VERSION_4_0: return

  glMinSampleShading = cast[proc (value: GLfloat) {.stdcall.}](load("glMinSampleShading"))
  glBlendEquationi = cast[proc (buf: GLuint, mode: GLenum) {.stdcall.}](load("glBlendEquationi"))
  glBlendEquationSeparatei = cast[proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}](load("glBlendEquationSeparatei"))
  glBlendFunci = cast[proc (buf: GLuint, src: GLenum, dst: GLenum) {.stdcall.}](load("glBlendFunci"))
  glBlendFuncSeparatei = cast[proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.stdcall.}](load("glBlendFuncSeparatei"))
  glDrawArraysIndirect = cast[proc (mode: GLenum, indirect: pointer) {.stdcall.}](load("glDrawArraysIndirect"))
  glDrawElementsIndirect = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer) {.stdcall.}](load("glDrawElementsIndirect"))
  glUniform1d = cast[proc (location: GLint, x: GLdouble) {.stdcall.}](load("glUniform1d"))
  glUniform2d = cast[proc (location: GLint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glUniform2d"))
  glUniform3d = cast[proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glUniform3d"))
  glUniform4d = cast[proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glUniform4d"))
  glUniform1dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform1dv"))
  glUniform2dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform2dv"))
  glUniform3dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform3dv"))
  glUniform4dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform4dv"))
  glUniformMatrix2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix2dv"))
  glUniformMatrix3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix3dv"))
  glUniformMatrix4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix4dv"))
  glUniformMatrix2x3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix2x3dv"))
  glUniformMatrix2x4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix2x4dv"))
  glUniformMatrix3x2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix3x2dv"))
  glUniformMatrix3x4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix3x4dv"))
  glUniformMatrix4x2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix4x2dv"))
  glUniformMatrix4x3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix4x3dv"))
  glGetUniformdv = cast[proc (program: GLuint, location: GLint, params: ptr GLdouble) {.stdcall.}](load("glGetUniformdv"))
  glGetSubroutineUniformLocation = cast[proc (program: GLuint, shadertype: GLenum, name: cstring): GLint {.stdcall.}](load("glGetSubroutineUniformLocation"))
  glGetSubroutineIndex = cast[proc (program: GLuint, shadertype: GLenum, name: cstring): GLuint {.stdcall.}](load("glGetSubroutineIndex"))
  glGetActiveSubroutineUniformiv = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint) {.stdcall.}](load("glGetActiveSubroutineUniformiv"))
  glGetActiveSubroutineUniformName = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}](load("glGetActiveSubroutineUniformName"))
  glGetActiveSubroutineName = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}](load("glGetActiveSubroutineName"))
  glUniformSubroutinesuiv = cast[proc (shadertype: GLenum, count: GLsizei, indices: ptr GLuint) {.stdcall.}](load("glUniformSubroutinesuiv"))
  glGetUniformSubroutineuiv = cast[proc (shadertype: GLenum, location: GLint, params: ptr GLuint) {.stdcall.}](load("glGetUniformSubroutineuiv"))
  glGetProgramStageiv = cast[proc (program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint) {.stdcall.}](load("glGetProgramStageiv"))
  glPatchParameteri = cast[proc (pname: GLenum, value: GLint) {.stdcall.}](load("glPatchParameteri"))
  glPatchParameterfv = cast[proc (pname: GLenum, values: ptr GLfloat) {.stdcall.}](load("glPatchParameterfv"))
  glBindTransformFeedback = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBindTransformFeedback"))
  glDeleteTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteTransformFeedbacks"))
  glGenTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenTransformFeedbacks"))
  glIsTransformFeedback = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsTransformFeedback"))
  glPauseTransformFeedback = cast[proc () {.stdcall.}](load("glPauseTransformFeedback"))
  glResumeTransformFeedback = cast[proc () {.stdcall.}](load("glResumeTransformFeedback"))
  glDrawTransformFeedback = cast[proc (mode: GLenum, id: GLuint) {.stdcall.}](load("glDrawTransformFeedback"))
  glDrawTransformFeedbackStream = cast[proc (mode: GLenum, id: GLuint, stream: GLuint) {.stdcall.}](load("glDrawTransformFeedbackStream"))
  glBeginQueryIndexed = cast[proc (target: GLenum, index: GLuint, id: GLuint) {.stdcall.}](load("glBeginQueryIndexed"))
  glEndQueryIndexed = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glEndQueryIndexed"))
  glGetQueryIndexediv = cast[proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryIndexediv"))


proc load_GL_VERSION_4_1(load: proc) =
  if not GLAD_GL_VERSION_4_1: return

  glReleaseShaderCompiler = cast[proc () {.stdcall.}](load("glReleaseShaderCompiler"))
  glShaderBinary = cast[proc (count: GLsizei, shaders: ptr GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}](load("glShaderBinary"))
  glGetShaderPrecisionFormat = cast[proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.stdcall.}](load("glGetShaderPrecisionFormat"))
  glDepthRangef = cast[proc (n: GLfloat, f: GLfloat) {.stdcall.}](load("glDepthRangef"))
  glClearDepthf = cast[proc (d: GLfloat) {.stdcall.}](load("glClearDepthf"))
  glGetProgramBinary = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer) {.stdcall.}](load("glGetProgramBinary"))
  glProgramBinary = cast[proc (program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}](load("glProgramBinary"))
  glProgramParameteri = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteri"))
  glUseProgramStages = cast[proc (pipeline: GLuint, stages: GLbitfield, program: GLuint) {.stdcall.}](load("glUseProgramStages"))
  glActiveShaderProgram = cast[proc (pipeline: GLuint, program: GLuint) {.stdcall.}](load("glActiveShaderProgram"))
  glCreateShaderProgramv = cast[proc (`type`: GLenum, count: GLsizei, strings: cstringArray): GLuint {.stdcall.}](load("glCreateShaderProgramv"))
  glBindProgramPipeline = cast[proc (pipeline: GLuint) {.stdcall.}](load("glBindProgramPipeline"))
  glDeleteProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glDeleteProgramPipelines"))
  glGenProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glGenProgramPipelines"))
  glIsProgramPipeline = cast[proc (pipeline: GLuint): GLboolean {.stdcall.}](load("glIsProgramPipeline"))
  glGetProgramPipelineiv = cast[proc (pipeline: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramPipelineiv"))
  glProgramParameteri = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteri"))
  glProgramUniform1i = cast[proc (program: GLuint, location: GLint, v0: GLint) {.stdcall.}](load("glProgramUniform1i"))
  glProgramUniform1iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform1iv"))
  glProgramUniform1f = cast[proc (program: GLuint, location: GLint, v0: GLfloat) {.stdcall.}](load("glProgramUniform1f"))
  glProgramUniform1fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform1fv"))
  glProgramUniform1d = cast[proc (program: GLuint, location: GLint, v0: GLdouble) {.stdcall.}](load("glProgramUniform1d"))
  glProgramUniform1dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform1dv"))
  glProgramUniform1ui = cast[proc (program: GLuint, location: GLint, v0: GLuint) {.stdcall.}](load("glProgramUniform1ui"))
  glProgramUniform1uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform1uiv"))
  glProgramUniform2i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.stdcall.}](load("glProgramUniform2i"))
  glProgramUniform2iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform2iv"))
  glProgramUniform2f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}](load("glProgramUniform2f"))
  glProgramUniform2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform2fv"))
  glProgramUniform2d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) {.stdcall.}](load("glProgramUniform2d"))
  glProgramUniform2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform2dv"))
  glProgramUniform2ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}](load("glProgramUniform2ui"))
  glProgramUniform2uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform2uiv"))
  glProgramUniform3i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}](load("glProgramUniform3i"))
  glProgramUniform3iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform3iv"))
  glProgramUniform3f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}](load("glProgramUniform3f"))
  glProgramUniform3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform3fv"))
  glProgramUniform3d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) {.stdcall.}](load("glProgramUniform3d"))
  glProgramUniform3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform3dv"))
  glProgramUniform3ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}](load("glProgramUniform3ui"))
  glProgramUniform3uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform3uiv"))
  glProgramUniform4i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}](load("glProgramUniform4i"))
  glProgramUniform4iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform4iv"))
  glProgramUniform4f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}](load("glProgramUniform4f"))
  glProgramUniform4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform4fv"))
  glProgramUniform4d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) {.stdcall.}](load("glProgramUniform4d"))
  glProgramUniform4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform4dv"))
  glProgramUniform4ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}](load("glProgramUniform4ui"))
  glProgramUniform4uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform4uiv"))
  glProgramUniformMatrix2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2fv"))
  glProgramUniformMatrix3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3fv"))
  glProgramUniformMatrix4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4fv"))
  glProgramUniformMatrix2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2dv"))
  glProgramUniformMatrix3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3dv"))
  glProgramUniformMatrix4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4dv"))
  glProgramUniformMatrix2x3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x3fv"))
  glProgramUniformMatrix3x2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x2fv"))
  glProgramUniformMatrix2x4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x4fv"))
  glProgramUniformMatrix4x2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x2fv"))
  glProgramUniformMatrix3x4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x4fv"))
  glProgramUniformMatrix4x3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x3fv"))
  glProgramUniformMatrix2x3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2x3dv"))
  glProgramUniformMatrix3x2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3x2dv"))
  glProgramUniformMatrix2x4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2x4dv"))
  glProgramUniformMatrix4x2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4x2dv"))
  glProgramUniformMatrix3x4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3x4dv"))
  glProgramUniformMatrix4x3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4x3dv"))
  glValidateProgramPipeline = cast[proc (pipeline: GLuint) {.stdcall.}](load("glValidateProgramPipeline"))
  glGetProgramPipelineInfoLog = cast[proc (pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetProgramPipelineInfoLog"))
  glVertexAttribL1d = cast[proc (index: GLuint, x: GLdouble) {.stdcall.}](load("glVertexAttribL1d"))
  glVertexAttribL2d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexAttribL2d"))
  glVertexAttribL3d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexAttribL3d"))
  glVertexAttribL4d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexAttribL4d"))
  glVertexAttribL1dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL1dv"))
  glVertexAttribL2dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL2dv"))
  glVertexAttribL3dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL3dv"))
  glVertexAttribL4dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL4dv"))
  glVertexAttribLPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribLPointer"))
  glGetVertexAttribLdv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVertexAttribLdv"))
  glViewportArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glViewportArrayv"))
  glViewportIndexedf = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) {.stdcall.}](load("glViewportIndexedf"))
  glViewportIndexedfv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glViewportIndexedfv"))
  glScissorArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLint) {.stdcall.}](load("glScissorArrayv"))
  glScissorIndexed = cast[proc (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glScissorIndexed"))
  glScissorIndexedv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glScissorIndexedv"))
  glDepthRangeArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glDepthRangeArrayv"))
  glDepthRangeIndexed = cast[proc (index: GLuint, n: GLdouble, f: GLdouble) {.stdcall.}](load("glDepthRangeIndexed"))
  glGetFloati_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLfloat) {.stdcall.}](load("glGetFloati_v"))
  glGetDoublei_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLdouble) {.stdcall.}](load("glGetDoublei_v"))


proc findExtensionsGL() =
  GLAD_GL_ARB_shading_language_420pack = hasExt("GL_ARB_shading_language_420pack")
  discard


proc findCoreGL(glVersion: string) =
  # Thank you @elmindreda
  # https://github.com/elmindreda/greg/blob/master/templates/greg.c.in#L176
  # https://github.com/glfw/glfw/blob/master/src/context.c#L36
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(glVersion[0]) - ord('0')
  var minor = ord(glVersion[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_VERSION_1_0 = (major == 1 and minor >= 0) or major > 1
  GLAD_GL_VERSION_1_1 = (major == 1 and minor >= 1) or major > 1
  GLAD_GL_VERSION_1_2 = (major == 1 and minor >= 2) or major > 1
  GLAD_GL_VERSION_1_3 = (major == 1 and minor >= 3) or major > 1
  GLAD_GL_VERSION_1_4 = (major == 1 and minor >= 4) or major > 1
  GLAD_GL_VERSION_1_5 = (major == 1 and minor >= 5) or major > 1
  GLAD_GL_VERSION_2_0 = (major == 2 and minor >= 0) or major > 2
  GLAD_GL_VERSION_2_1 = (major == 2 and minor >= 1) or major > 2
  GLAD_GL_VERSION_3_0 = (major == 3 and minor >= 0) or major > 3
  GLAD_GL_VERSION_3_1 = (major == 3 and minor >= 1) or major > 3
  GLAD_GL_VERSION_3_2 = (major == 3 and minor >= 2) or major > 3
  GLAD_GL_VERSION_3_3 = (major == 3 and minor >= 3) or major > 3
  GLAD_GL_VERSION_4_0 = (major == 4 and minor >= 0) or major > 4
  GLAD_GL_VERSION_4_1 = (major == 4 and minor >= 1) or major > 4


proc gladLoadGL*(load: proc): bool =
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.stdcall.}](load("glGetString"))
  if glGetString == nil: return false

  var glVersion = cast[cstring](glGetString(GL_VERSION))
  if glVersion == nil: return false

  findCoreGL($glVersion)

  load_GL_VERSION_1_0(load)
  load_GL_VERSION_1_1(load)
  load_GL_VERSION_1_2(load)
  load_GL_VERSION_1_3(load)
  load_GL_VERSION_1_4(load)
  load_GL_VERSION_1_5(load)
  load_GL_VERSION_2_0(load)
  load_GL_VERSION_2_1(load)
  load_GL_VERSION_3_0(load)
  load_GL_VERSION_3_1(load)
  load_GL_VERSION_3_2(load)
  load_GL_VERSION_3_3(load)
  load_GL_VERSION_4_0(load)
  load_GL_VERSION_4_1(load)

  findExtensionsGL()


  return glVersionMajor != 0 or glVersionMinor != 0

