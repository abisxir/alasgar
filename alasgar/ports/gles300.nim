#[
    OpenGL ES loader generated by glad 0.1.36 on Fri May 12 11:24:18 2023.

    Language/Generator: Nim
    Specification: gl
    APIs: gles2=3.0
    Profile: compatibility
    Extensions:
        GL_EXT_color_buffer_float,
        GL_EXT_color_buffer_half_float
    Loader: True
    Local files: False
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --profile="compatibility" --api="gles2=3.0" --generator="nim" --spec="gl" --extensions="GL_EXT_color_buffer_float,GL_EXT_color_buffer_half_float"
    Online:
        https://glad.dav1d.de/#profile=compatibility&language=nim&specification=gl&loader=on&api=gles2%3D3.0&extensions=GL_EXT_color_buffer_float&extensions=GL_EXT_color_buffer_half_float
]#

import strutils

var glVersionMajor, glVersionMinor: int

# Types
type
  ClContext* = distinct pointer
  ClEvent* = distinct pointer
  GLVULKANPROCNV* = pointer
  GLbitfield* = distinct uint32
  GLboolean* = bool
  GLbyte* = int8
  GLchar* = char
  GLcharARB* = char
  GLclampd* = float64
  GLclampf* = float32
  GLclampx* = int32
  GLdouble* = float64
  GLeglClientBufferEXT* = pointer
  GLeglImageOES* = distinct pointer
  GLenum* = distinct uint32
  GLfixed* = int32
  GLfloat* = float32
  GLhalf* = uint16
  GLhalfARB* = uint16
  GLhalfNV* = uint16
  GLhandleARB* = uint32
  GLint* = int32
  GLint64* = int64
  GLint64EXT* = int64
  GLintptr* = cint
  GLintptrARB* = cint
  GLshort* = int16
  GLsizei* = int32
  GLsizeiptr* = cint
  GLsizeiptrARB* = cint
  GLsync* = distinct pointer
  GLubyte* = uint8
  GLuint* = uint32
  GLuint64* = uint64
  GLuint64EXT* = uint64
  GLushort* = uint16
  GLvdpauSurfaceNV* = int32
  GLvoid* = pointer

  GLdebugProc* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcArb* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcAmd* = proc (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcKhr* = proc (
    source, typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}


# Enums

proc `==`*(a, b: GLenum): bool {.borrow.}
proc `==`*(a, b: GLbitfield): bool {.borrow.}
proc `or`*(a, b: GLbitfield): GLbitfield {.borrow.}
proc hash*(x: GLenum): int = x.int

const
  GL_FALSE* = 0
  GL_INVALID_INDEX* = 0xFFFFFFFF'u32
  GL_NONE* = 0
  GL_NONE_OES* = 0
  GL_NO_ERROR* = 0
  GL_ONE* = 1
  GL_TIMEOUT_IGNORED* = 0xFFFFFFFFFFFFFFFF'u64
  GL_TIMEOUT_IGNORED_APPLE* = 0xFFFFFFFFFFFFFFFF'u64
  GL_TRUE* = 1
  GL_VERSION_ES_CL_1_0* = 1
  GL_VERSION_ES_CL_1_1* = 1
  GL_VERSION_ES_CM_1_1* = 1
  GL_ZERO* = 0

  GL_DEPTH_BUFFER_BIT* = 0x00000100.GLbitfield
  GL_STENCIL_BUFFER_BIT* = 0x00000400.GLbitfield
  GL_COLOR_BUFFER_BIT* = 0x00004000.GLbitfield
  GL_POINTS* = 0x0000.GLenum
  GL_LINES* = 0x0001.GLenum
  GL_LINE_LOOP* = 0x0002.GLenum
  GL_LINE_STRIP* = 0x0003.GLenum
  GL_TRIANGLES* = 0x0004.GLenum
  GL_TRIANGLE_STRIP* = 0x0005.GLenum
  GL_TRIANGLE_FAN* = 0x0006.GLenum
  GL_SRC_COLOR* = 0x0300.GLenum
  GL_ONE_MINUS_SRC_COLOR* = 0x0301.GLenum
  GL_SRC_ALPHA* = 0x0302.GLenum
  GL_ONE_MINUS_SRC_ALPHA* = 0x0303.GLenum
  GL_DST_ALPHA* = 0x0304.GLenum
  GL_ONE_MINUS_DST_ALPHA* = 0x0305.GLenum
  GL_DST_COLOR* = 0x0306.GLenum
  GL_ONE_MINUS_DST_COLOR* = 0x0307.GLenum
  GL_SRC_ALPHA_SATURATE* = 0x0308.GLenum
  GL_FUNC_ADD* = 0x8006.GLenum
  GL_BLEND_EQUATION* = 0x8009.GLenum
  GL_BLEND_EQUATION_RGB* = 0x8009.GLenum
  GL_BLEND_EQUATION_ALPHA* = 0x883D.GLenum
  GL_FUNC_SUBTRACT* = 0x800A.GLenum
  GL_FUNC_REVERSE_SUBTRACT* = 0x800B.GLenum
  GL_BLEND_DST_RGB* = 0x80C8.GLenum
  GL_BLEND_SRC_RGB* = 0x80C9.GLenum
  GL_BLEND_DST_ALPHA* = 0x80CA.GLenum
  GL_BLEND_SRC_ALPHA* = 0x80CB.GLenum
  GL_CONSTANT_COLOR* = 0x8001.GLenum
  GL_ONE_MINUS_CONSTANT_COLOR* = 0x8002.GLenum
  GL_CONSTANT_ALPHA* = 0x8003.GLenum
  GL_ONE_MINUS_CONSTANT_ALPHA* = 0x8004.GLenum
  GL_BLEND_COLOR* = 0x8005.GLenum
  GL_ARRAY_BUFFER* = 0x8892.GLenum
  GL_ELEMENT_ARRAY_BUFFER* = 0x8893.GLenum
  GL_ARRAY_BUFFER_BINDING* = 0x8894.GLenum
  GL_ELEMENT_ARRAY_BUFFER_BINDING* = 0x8895.GLenum
  GL_STREAM_DRAW* = 0x88E0.GLenum
  GL_STATIC_DRAW* = 0x88E4.GLenum
  GL_DYNAMIC_DRAW* = 0x88E8.GLenum
  GL_BUFFER_SIZE* = 0x8764.GLenum
  GL_BUFFER_USAGE* = 0x8765.GLenum
  GL_CURRENT_VERTEX_ATTRIB* = 0x8626.GLenum
  GL_FRONT* = 0x0404.GLenum
  GL_BACK* = 0x0405.GLenum
  GL_FRONT_AND_BACK* = 0x0408.GLenum
  GL_TEXTURE_2D* = 0x0DE1.GLenum
  GL_CULL_FACE* = 0x0B44.GLenum
  GL_BLEND* = 0x0BE2.GLenum
  GL_DITHER* = 0x0BD0.GLenum
  GL_STENCIL_TEST* = 0x0B90.GLenum
  GL_DEPTH_TEST* = 0x0B71.GLenum
  GL_SCISSOR_TEST* = 0x0C11.GLenum
  GL_POLYGON_OFFSET_FILL* = 0x8037.GLenum
  GL_SAMPLE_ALPHA_TO_COVERAGE* = 0x809E.GLenum
  GL_SAMPLE_COVERAGE* = 0x80A0.GLenum
  GL_INVALID_ENUM* = 0x0500.GLenum
  GL_INVALID_VALUE* = 0x0501.GLenum
  GL_INVALID_OPERATION* = 0x0502.GLenum
  GL_OUT_OF_MEMORY* = 0x0505.GLenum
  GL_CW* = 0x0900.GLenum
  GL_CCW* = 0x0901.GLenum
  GL_LINE_WIDTH* = 0x0B21.GLenum
  GL_ALIASED_POINT_SIZE_RANGE* = 0x846D.GLenum
  GL_ALIASED_LINE_WIDTH_RANGE* = 0x846E.GLenum
  GL_CULL_FACE_MODE* = 0x0B45.GLenum
  GL_FRONT_FACE* = 0x0B46.GLenum
  GL_DEPTH_RANGE* = 0x0B70.GLenum
  GL_DEPTH_WRITEMASK* = 0x0B72.GLenum
  GL_DEPTH_CLEAR_VALUE* = 0x0B73.GLenum
  GL_DEPTH_FUNC* = 0x0B74.GLenum
  GL_STENCIL_CLEAR_VALUE* = 0x0B91.GLenum
  GL_STENCIL_FUNC* = 0x0B92.GLenum
  GL_STENCIL_FAIL* = 0x0B94.GLenum
  GL_STENCIL_PASS_DEPTH_FAIL* = 0x0B95.GLenum
  GL_STENCIL_PASS_DEPTH_PASS* = 0x0B96.GLenum
  GL_STENCIL_REF* = 0x0B97.GLenum
  GL_STENCIL_VALUE_MASK* = 0x0B93.GLenum
  GL_STENCIL_WRITEMASK* = 0x0B98.GLenum
  GL_STENCIL_BACK_FUNC* = 0x8800.GLenum
  GL_STENCIL_BACK_FAIL* = 0x8801.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_FAIL* = 0x8802.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_PASS* = 0x8803.GLenum
  GL_STENCIL_BACK_REF* = 0x8CA3.GLenum
  GL_STENCIL_BACK_VALUE_MASK* = 0x8CA4.GLenum
  GL_STENCIL_BACK_WRITEMASK* = 0x8CA5.GLenum
  GL_VIEWPORT* = 0x0BA2.GLenum
  GL_SCISSOR_BOX* = 0x0C10.GLenum
  GL_COLOR_CLEAR_VALUE* = 0x0C22.GLenum
  GL_COLOR_WRITEMASK* = 0x0C23.GLenum
  GL_UNPACK_ALIGNMENT* = 0x0CF5.GLenum
  GL_PACK_ALIGNMENT* = 0x0D05.GLenum
  GL_MAX_TEXTURE_SIZE* = 0x0D33.GLenum
  GL_MAX_VIEWPORT_DIMS* = 0x0D3A.GLenum
  GL_SUBPIXEL_BITS* = 0x0D50.GLbitfield
  GL_RED_BITS* = 0x0D52.GLbitfield
  GL_GREEN_BITS* = 0x0D53.GLbitfield
  GL_BLUE_BITS* = 0x0D54.GLbitfield
  GL_ALPHA_BITS* = 0x0D55.GLbitfield
  GL_DEPTH_BITS* = 0x0D56.GLbitfield
  GL_STENCIL_BITS* = 0x0D57.GLbitfield
  GL_POLYGON_OFFSET_UNITS* = 0x2A00.GLenum
  GL_POLYGON_OFFSET_FACTOR* = 0x8038.GLenum
  GL_TEXTURE_BINDING_2D* = 0x8069.GLenum
  GL_SAMPLE_BUFFERS* = 0x80A8.GLenum
  GL_SAMPLES* = 0x80A9.GLenum
  GL_SAMPLE_COVERAGE_VALUE* = 0x80AA.GLenum
  GL_SAMPLE_COVERAGE_INVERT* = 0x80AB.GLenum
  GL_NUM_COMPRESSED_TEXTURE_FORMATS* = 0x86A2.GLenum
  GL_COMPRESSED_TEXTURE_FORMATS* = 0x86A3.GLenum
  GL_DONT_CARE* = 0x1100.GLenum
  GL_FASTEST* = 0x1101.GLenum
  GL_NICEST* = 0x1102.GLenum
  GL_GENERATE_MIPMAP_HINT* = 0x8192.GLenum
  cGL_BYTE* = 0x1400.GLenum
  GL_UNSIGNED_BYTE* = 0x1401.GLenum
  cGL_SHORT* = 0x1402.GLenum
  GL_UNSIGNED_SHORT* = 0x1403.GLenum
  cGL_INT* = 0x1404.GLenum
  GL_UNSIGNED_INT* = 0x1405.GLenum
  cGL_FLOAT* = 0x1406.GLenum
  cGL_FIXED* = 0x140C.GLenum
  GL_DEPTH_COMPONENT* = 0x1902.GLenum
  GL_ALPHA* = 0x1906.GLenum
  GL_RGB* = 0x1907.GLenum
  GL_RGBA* = 0x1908.GLenum
  GL_LUMINANCE* = 0x1909.GLenum
  GL_LUMINANCE_ALPHA* = 0x190A.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4* = 0x8033.GLenum
  GL_UNSIGNED_SHORT_5_5_5_1* = 0x8034.GLenum
  GL_UNSIGNED_SHORT_5_6_5* = 0x8363.GLenum
  GL_FRAGMENT_SHADER* = 0x8B30.GLenum
  GL_VERTEX_SHADER* = 0x8B31.GLenum
  GL_MAX_VERTEX_ATTRIBS* = 0x8869.GLenum
  GL_MAX_VERTEX_UNIFORM_VECTORS* = 0x8DFB.GLenum
  GL_MAX_VARYING_VECTORS* = 0x8DFC.GLenum
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS* = 0x8B4D.GLenum
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS* = 0x8B4C.GLenum
  GL_MAX_TEXTURE_IMAGE_UNITS* = 0x8872.GLenum
  GL_MAX_FRAGMENT_UNIFORM_VECTORS* = 0x8DFD.GLenum
  GL_SHADER_TYPE* = 0x8B4F.GLenum
  GL_DELETE_STATUS* = 0x8B80.GLenum
  GL_LINK_STATUS* = 0x8B82.GLenum
  GL_VALIDATE_STATUS* = 0x8B83.GLenum
  GL_ATTACHED_SHADERS* = 0x8B85.GLenum
  GL_ACTIVE_UNIFORMS* = 0x8B86.GLenum
  GL_ACTIVE_UNIFORM_MAX_LENGTH* = 0x8B87.GLenum
  GL_ACTIVE_ATTRIBUTES* = 0x8B89.GLenum
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH* = 0x8B8A.GLenum
  GL_SHADING_LANGUAGE_VERSION* = 0x8B8C.GLenum
  GL_CURRENT_PROGRAM* = 0x8B8D.GLenum
  GL_NEVER* = 0x0200.GLenum
  GL_LESS* = 0x0201.GLenum
  GL_EQUAL* = 0x0202.GLenum
  GL_LEQUAL* = 0x0203.GLenum
  GL_GREATER* = 0x0204.GLenum
  GL_NOTEQUAL* = 0x0205.GLenum
  GL_GEQUAL* = 0x0206.GLenum
  GL_ALWAYS* = 0x0207.GLenum
  GL_KEEP* = 0x1E00.GLenum
  GL_REPLACE* = 0x1E01.GLenum
  GL_INCR* = 0x1E02.GLenum
  GL_DECR* = 0x1E03.GLenum
  GL_INVERT* = 0x150A.GLenum
  GL_INCR_WRAP* = 0x8507.GLenum
  GL_DECR_WRAP* = 0x8508.GLenum
  GL_VENDOR* = 0x1F00.GLenum
  GL_RENDERER* = 0x1F01.GLenum
  GL_VERSION* = 0x1F02.GLenum
  GL_EXTENSIONS* = 0x1F03.GLenum
  GL_NEAREST* = 0x2600.GLenum
  GL_LINEAR* = 0x2601.GLenum
  GL_NEAREST_MIPMAP_NEAREST* = 0x2700.GLenum
  GL_LINEAR_MIPMAP_NEAREST* = 0x2701.GLenum
  GL_NEAREST_MIPMAP_LINEAR* = 0x2702.GLenum
  GL_LINEAR_MIPMAP_LINEAR* = 0x2703.GLenum
  GL_TEXTURE_MAG_FILTER* = 0x2800.GLenum
  GL_TEXTURE_MIN_FILTER* = 0x2801.GLenum
  GL_TEXTURE_WRAP_S* = 0x2802.GLenum
  GL_TEXTURE_WRAP_T* = 0x2803.GLenum
  GL_TEXTURE* = 0x1702.GLenum
  GL_TEXTURE_CUBE_MAP* = 0x8513.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP* = 0x8514.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_X* = 0x8515.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X* = 0x8516.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y* = 0x8517.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y* = 0x8518.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z* = 0x8519.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z* = 0x851A.GLenum
  GL_MAX_CUBE_MAP_TEXTURE_SIZE* = 0x851C.GLenum
  GL_TEXTURE0* = 0x84C0.GLenum
  GL_TEXTURE1* = 0x84C1.GLenum
  GL_TEXTURE2* = 0x84C2.GLenum
  GL_TEXTURE3* = 0x84C3.GLenum
  GL_TEXTURE4* = 0x84C4.GLenum
  GL_TEXTURE5* = 0x84C5.GLenum
  GL_TEXTURE6* = 0x84C6.GLenum
  GL_TEXTURE7* = 0x84C7.GLenum
  GL_TEXTURE8* = 0x84C8.GLenum
  GL_TEXTURE9* = 0x84C9.GLenum
  GL_TEXTURE10* = 0x84CA.GLenum
  GL_TEXTURE11* = 0x84CB.GLenum
  GL_TEXTURE12* = 0x84CC.GLenum
  GL_TEXTURE13* = 0x84CD.GLenum
  GL_TEXTURE14* = 0x84CE.GLenum
  GL_TEXTURE15* = 0x84CF.GLenum
  GL_TEXTURE16* = 0x84D0.GLenum
  GL_TEXTURE17* = 0x84D1.GLenum
  GL_TEXTURE18* = 0x84D2.GLenum
  GL_TEXTURE19* = 0x84D3.GLenum
  GL_TEXTURE20* = 0x84D4.GLenum
  GL_TEXTURE21* = 0x84D5.GLenum
  GL_TEXTURE22* = 0x84D6.GLenum
  GL_TEXTURE23* = 0x84D7.GLenum
  GL_TEXTURE24* = 0x84D8.GLenum
  GL_TEXTURE25* = 0x84D9.GLenum
  GL_TEXTURE26* = 0x84DA.GLenum
  GL_TEXTURE27* = 0x84DB.GLenum
  GL_TEXTURE28* = 0x84DC.GLenum
  GL_TEXTURE29* = 0x84DD.GLenum
  GL_TEXTURE30* = 0x84DE.GLenum
  GL_TEXTURE31* = 0x84DF.GLenum
  GL_ACTIVE_TEXTURE* = 0x84E0.GLenum
  GL_REPEAT* = 0x2901.GLenum
  GL_CLAMP_TO_EDGE* = 0x812F.GLenum
  GL_MIRRORED_REPEAT* = 0x8370.GLenum
  GL_FLOAT_VEC2* = 0x8B50.GLenum
  GL_FLOAT_VEC3* = 0x8B51.GLenum
  GL_FLOAT_VEC4* = 0x8B52.GLenum
  GL_INT_VEC2* = 0x8B53.GLenum
  GL_INT_VEC3* = 0x8B54.GLenum
  GL_INT_VEC4* = 0x8B55.GLenum
  GL_BOOL* = 0x8B56.GLenum
  GL_BOOL_VEC2* = 0x8B57.GLenum
  GL_BOOL_VEC3* = 0x8B58.GLenum
  GL_BOOL_VEC4* = 0x8B59.GLenum
  GL_FLOAT_MAT2* = 0x8B5A.GLenum
  GL_FLOAT_MAT3* = 0x8B5B.GLenum
  GL_FLOAT_MAT4* = 0x8B5C.GLenum
  GL_SAMPLER_2D* = 0x8B5E.GLenum
  GL_SAMPLER_CUBE* = 0x8B60.GLenum
  GL_VERTEX_ATTRIB_ARRAY_ENABLED* = 0x8622.GLenum
  GL_VERTEX_ATTRIB_ARRAY_SIZE* = 0x8623.GLenum
  GL_VERTEX_ATTRIB_ARRAY_STRIDE* = 0x8624.GLenum
  GL_VERTEX_ATTRIB_ARRAY_TYPE* = 0x8625.GLenum
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED* = 0x886A.GLenum
  GL_VERTEX_ATTRIB_ARRAY_POINTER* = 0x8645.GLenum
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING* = 0x889F.GLenum
  GL_IMPLEMENTATION_COLOR_READ_TYPE* = 0x8B9A.GLenum
  GL_IMPLEMENTATION_COLOR_READ_FORMAT* = 0x8B9B.GLenum
  GL_COMPILE_STATUS* = 0x8B81.GLenum
  GL_INFO_LOG_LENGTH* = 0x8B84.GLenum
  GL_SHADER_SOURCE_LENGTH* = 0x8B88.GLenum
  GL_SHADER_COMPILER* = 0x8DFA.GLenum
  GL_SHADER_BINARY_FORMATS* = 0x8DF8.GLenum
  GL_NUM_SHADER_BINARY_FORMATS* = 0x8DF9.GLenum
  GL_LOW_FLOAT* = 0x8DF0.GLenum
  GL_MEDIUM_FLOAT* = 0x8DF1.GLenum
  GL_HIGH_FLOAT* = 0x8DF2.GLenum
  GL_LOW_INT* = 0x8DF3.GLenum
  GL_MEDIUM_INT* = 0x8DF4.GLenum
  GL_HIGH_INT* = 0x8DF5.GLenum
  GL_FRAMEBUFFER* = 0x8D40.GLenum
  GL_RENDERBUFFER* = 0x8D41.GLenum
  GL_RGBA4* = 0x8056.GLenum
  GL_RGB5_A1* = 0x8057.GLenum
  GL_RGB565* = 0x8D62.GLenum
  GL_DEPTH_COMPONENT16* = 0x81A5.GLenum
  GL_STENCIL_INDEX8* = 0x8D48.GLenum
  GL_RENDERBUFFER_WIDTH* = 0x8D42.GLenum
  GL_RENDERBUFFER_HEIGHT* = 0x8D43.GLenum
  GL_RENDERBUFFER_INTERNAL_FORMAT* = 0x8D44.GLenum
  GL_RENDERBUFFER_RED_SIZE* = 0x8D50.GLenum
  GL_RENDERBUFFER_GREEN_SIZE* = 0x8D51.GLenum
  GL_RENDERBUFFER_BLUE_SIZE* = 0x8D52.GLenum
  GL_RENDERBUFFER_ALPHA_SIZE* = 0x8D53.GLenum
  GL_RENDERBUFFER_DEPTH_SIZE* = 0x8D54.GLenum
  GL_RENDERBUFFER_STENCIL_SIZE* = 0x8D55.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE* = 0x8CD0.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME* = 0x8CD1.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL* = 0x8CD2.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE* = 0x8CD3.GLenum
  GL_COLOR_ATTACHMENT0* = 0x8CE0.GLenum
  GL_DEPTH_ATTACHMENT* = 0x8D00.GLenum
  GL_STENCIL_ATTACHMENT* = 0x8D20.GLenum
  GL_FRAMEBUFFER_COMPLETE* = 0x8CD5.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT* = 0x8CD6.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT* = 0x8CD7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS* = 0x8CD9.GLenum
  GL_FRAMEBUFFER_UNSUPPORTED* = 0x8CDD.GLenum
  GL_FRAMEBUFFER_BINDING* = 0x8CA6.GLenum
  GL_RENDERBUFFER_BINDING* = 0x8CA7.GLenum
  GL_MAX_RENDERBUFFER_SIZE* = 0x84E8.GLenum
  GL_INVALID_FRAMEBUFFER_OPERATION* = 0x0506.GLenum
  GL_READ_BUFFER* = 0x0C02.GLenum
  GL_UNPACK_ROW_LENGTH* = 0x0CF2.GLenum
  GL_UNPACK_SKIP_ROWS* = 0x0CF3.GLenum
  GL_UNPACK_SKIP_PIXELS* = 0x0CF4.GLenum
  GL_PACK_ROW_LENGTH* = 0x0D02.GLenum
  GL_PACK_SKIP_ROWS* = 0x0D03.GLenum
  GL_PACK_SKIP_PIXELS* = 0x0D04.GLenum
  GL_COLOR* = 0x1800.GLenum
  GL_DEPTH* = 0x1801.GLenum
  GL_STENCIL* = 0x1802.GLenum
  GL_RED* = 0x1903.GLenum
  GL_RGB8* = 0x8051.GLenum
  GL_RGBA8* = 0x8058.GLenum
  GL_RGB10_A2* = 0x8059.GLenum
  GL_TEXTURE_BINDING_3D* = 0x806A.GLenum
  GL_UNPACK_SKIP_IMAGES* = 0x806D.GLenum
  GL_UNPACK_IMAGE_HEIGHT* = 0x806E.GLenum
  GL_TEXTURE_3D* = 0x806F.GLenum
  GL_TEXTURE_WRAP_R* = 0x8072.GLenum
  GL_MAX_3D_TEXTURE_SIZE* = 0x8073.GLenum
  GL_UNSIGNED_INT_2_10_10_10_REV* = 0x8368.GLenum
  GL_MAX_ELEMENTS_VERTICES* = 0x80E8.GLenum
  GL_MAX_ELEMENTS_INDICES* = 0x80E9.GLenum
  GL_TEXTURE_MIN_LOD* = 0x813A.GLenum
  GL_TEXTURE_MAX_LOD* = 0x813B.GLenum
  GL_TEXTURE_BASE_LEVEL* = 0x813C.GLenum
  GL_TEXTURE_MAX_LEVEL* = 0x813D.GLenum
  GL_MIN* = 0x8007.GLenum
  GL_MAX* = 0x8008.GLenum
  GL_DEPTH_COMPONENT24* = 0x81A6.GLenum
  GL_MAX_TEXTURE_LOD_BIAS* = 0x84FD.GLenum
  GL_TEXTURE_COMPARE_MODE* = 0x884C.GLenum
  GL_TEXTURE_COMPARE_FUNC* = 0x884D.GLenum
  GL_CURRENT_QUERY* = 0x8865.GLenum
  GL_QUERY_RESULT* = 0x8866.GLenum
  GL_QUERY_RESULT_AVAILABLE* = 0x8867.GLenum
  GL_BUFFER_MAPPED* = 0x88BC.GLenum
  GL_BUFFER_MAP_POINTER* = 0x88BD.GLenum
  GL_STREAM_READ* = 0x88E1.GLenum
  GL_STREAM_COPY* = 0x88E2.GLenum
  GL_STATIC_READ* = 0x88E5.GLenum
  GL_STATIC_COPY* = 0x88E6.GLenum
  GL_DYNAMIC_READ* = 0x88E9.GLenum
  GL_DYNAMIC_COPY* = 0x88EA.GLenum
  GL_MAX_DRAW_BUFFERS* = 0x8824.GLenum
  GL_DRAW_BUFFER0* = 0x8825.GLenum
  GL_DRAW_BUFFER1* = 0x8826.GLenum
  GL_DRAW_BUFFER2* = 0x8827.GLenum
  GL_DRAW_BUFFER3* = 0x8828.GLenum
  GL_DRAW_BUFFER4* = 0x8829.GLenum
  GL_DRAW_BUFFER5* = 0x882A.GLenum
  GL_DRAW_BUFFER6* = 0x882B.GLenum
  GL_DRAW_BUFFER7* = 0x882C.GLenum
  GL_DRAW_BUFFER8* = 0x882D.GLenum
  GL_DRAW_BUFFER9* = 0x882E.GLenum
  GL_DRAW_BUFFER10* = 0x882F.GLenum
  GL_DRAW_BUFFER11* = 0x8830.GLenum
  GL_DRAW_BUFFER12* = 0x8831.GLenum
  GL_DRAW_BUFFER13* = 0x8832.GLenum
  GL_DRAW_BUFFER14* = 0x8833.GLenum
  GL_DRAW_BUFFER15* = 0x8834.GLenum
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS* = 0x8B49.GLenum
  GL_MAX_VERTEX_UNIFORM_COMPONENTS* = 0x8B4A.GLenum
  GL_SAMPLER_3D* = 0x8B5F.GLenum
  GL_SAMPLER_2D_SHADOW* = 0x8B62.GLenum
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT* = 0x8B8B.GLenum
  GL_PIXEL_PACK_BUFFER* = 0x88EB.GLenum
  GL_PIXEL_UNPACK_BUFFER* = 0x88EC.GLenum
  GL_PIXEL_PACK_BUFFER_BINDING* = 0x88ED.GLenum
  GL_PIXEL_UNPACK_BUFFER_BINDING* = 0x88EF.GLenum
  GL_FLOAT_MAT2x3* = 0x8B65.GLenum
  GL_FLOAT_MAT2x4* = 0x8B66.GLenum
  GL_FLOAT_MAT3x2* = 0x8B67.GLenum
  GL_FLOAT_MAT3x4* = 0x8B68.GLenum
  GL_FLOAT_MAT4x2* = 0x8B69.GLenum
  GL_FLOAT_MAT4x3* = 0x8B6A.GLenum
  GL_SRGB* = 0x8C40.GLenum
  GL_SRGB8* = 0x8C41.GLenum
  GL_SRGB8_ALPHA8* = 0x8C43.GLenum
  GL_COMPARE_REF_TO_TEXTURE* = 0x884E.GLenum
  GL_MAJOR_VERSION* = 0x821B.GLenum
  GL_MINOR_VERSION* = 0x821C.GLenum
  GL_NUM_EXTENSIONS* = 0x821D.GLenum
  GL_RGBA32F* = 0x8814.GLenum
  GL_RGB32F* = 0x8815.GLenum
  GL_RGBA16F* = 0x881A.GLenum
  GL_RGB16F* = 0x881B.GLenum
  GL_VERTEX_ATTRIB_ARRAY_INTEGER* = 0x88FD.GLenum
  GL_MAX_ARRAY_TEXTURE_LAYERS* = 0x88FF.GLenum
  GL_MIN_PROGRAM_TEXEL_OFFSET* = 0x8904.GLenum
  GL_MAX_PROGRAM_TEXEL_OFFSET* = 0x8905.GLenum
  GL_MAX_VARYING_COMPONENTS* = 0x8B4B.GLenum
  GL_TEXTURE_2D_ARRAY* = 0x8C1A.GLenum
  GL_TEXTURE_BINDING_2D_ARRAY* = 0x8C1D.GLenum
  GL_R11F_G11F_B10F* = 0x8C3A.GLenum
  GL_UNSIGNED_INT_10F_11F_11F_REV* = 0x8C3B.GLenum
  GL_RGB9_E5* = 0x8C3D.GLenum
  GL_UNSIGNED_INT_5_9_9_9_REV* = 0x8C3E.GLenum
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH* = 0x8C76.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE* = 0x8C7F.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS* = 0x8C80.GLenum
  GL_TRANSFORM_FEEDBACK_VARYINGS* = 0x8C83.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_START* = 0x8C84.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE* = 0x8C85.GLenum
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN* = 0x8C88.GLenum
  GL_RASTERIZER_DISCARD* = 0x8C89.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS* = 0x8C8A.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS* = 0x8C8B.GLenum
  GL_INTERLEAVED_ATTRIBS* = 0x8C8C.GLenum
  GL_SEPARATE_ATTRIBS* = 0x8C8D.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER* = 0x8C8E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING* = 0x8C8F.GLenum
  GL_RGBA32UI* = 0x8D70.GLenum
  GL_RGB32UI* = 0x8D71.GLenum
  GL_RGBA16UI* = 0x8D76.GLenum
  GL_RGB16UI* = 0x8D77.GLenum
  GL_RGBA8UI* = 0x8D7C.GLenum
  GL_RGB8UI* = 0x8D7D.GLenum
  GL_RGBA32I* = 0x8D82.GLenum
  GL_RGB32I* = 0x8D83.GLenum
  GL_RGBA16I* = 0x8D88.GLenum
  GL_RGB16I* = 0x8D89.GLenum
  GL_RGBA8I* = 0x8D8E.GLenum
  GL_RGB8I* = 0x8D8F.GLenum
  GL_RED_INTEGER* = 0x8D94.GLenum
  GL_RGB_INTEGER* = 0x8D98.GLenum
  GL_RGBA_INTEGER* = 0x8D99.GLenum
  GL_SAMPLER_2D_ARRAY* = 0x8DC1.GLenum
  GL_SAMPLER_2D_ARRAY_SHADOW* = 0x8DC4.GLenum
  GL_SAMPLER_CUBE_SHADOW* = 0x8DC5.GLenum
  GL_UNSIGNED_INT_VEC2* = 0x8DC6.GLenum
  GL_UNSIGNED_INT_VEC3* = 0x8DC7.GLenum
  GL_UNSIGNED_INT_VEC4* = 0x8DC8.GLenum
  GL_INT_SAMPLER_2D* = 0x8DCA.GLenum
  GL_INT_SAMPLER_3D* = 0x8DCB.GLenum
  GL_INT_SAMPLER_CUBE* = 0x8DCC.GLenum
  GL_INT_SAMPLER_2D_ARRAY* = 0x8DCF.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D* = 0x8DD2.GLenum
  GL_UNSIGNED_INT_SAMPLER_3D* = 0x8DD3.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE* = 0x8DD4.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY* = 0x8DD7.GLenum
  GL_BUFFER_ACCESS_FLAGS* = 0x911F.GLenum
  GL_BUFFER_MAP_LENGTH* = 0x9120.GLenum
  GL_BUFFER_MAP_OFFSET* = 0x9121.GLenum
  GL_DEPTH_COMPONENT32F* = 0x8CAC.GLenum
  GL_DEPTH32F_STENCIL8* = 0x8CAD.GLenum
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV* = 0x8DAD.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING* = 0x8210.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE* = 0x8211.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE* = 0x8212.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE* = 0x8213.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE* = 0x8214.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE* = 0x8215.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE* = 0x8216.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE* = 0x8217.GLenum
  GL_FRAMEBUFFER_DEFAULT* = 0x8218.GLenum
  GL_FRAMEBUFFER_UNDEFINED* = 0x8219.GLenum
  GL_DEPTH_STENCIL_ATTACHMENT* = 0x821A.GLenum
  GL_DEPTH_STENCIL* = 0x84F9.GLenum
  GL_UNSIGNED_INT_24_8* = 0x84FA.GLenum
  GL_DEPTH24_STENCIL8* = 0x88F0.GLenum
  GL_UNSIGNED_NORMALIZED* = 0x8C17.GLenum
  GL_DRAW_FRAMEBUFFER_BINDING* = 0x8CA6.GLenum
  GL_READ_FRAMEBUFFER* = 0x8CA8.GLenum
  GL_DRAW_FRAMEBUFFER* = 0x8CA9.GLenum
  GL_READ_FRAMEBUFFER_BINDING* = 0x8CAA.GLenum
  GL_RENDERBUFFER_SAMPLES* = 0x8CAB.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER* = 0x8CD4.GLenum
  GL_MAX_COLOR_ATTACHMENTS* = 0x8CDF.GLenum
  GL_COLOR_ATTACHMENT1* = 0x8CE1.GLenum
  GL_COLOR_ATTACHMENT2* = 0x8CE2.GLenum
  GL_COLOR_ATTACHMENT3* = 0x8CE3.GLenum
  GL_COLOR_ATTACHMENT4* = 0x8CE4.GLenum
  GL_COLOR_ATTACHMENT5* = 0x8CE5.GLenum
  GL_COLOR_ATTACHMENT6* = 0x8CE6.GLenum
  GL_COLOR_ATTACHMENT7* = 0x8CE7.GLenum
  GL_COLOR_ATTACHMENT8* = 0x8CE8.GLenum
  GL_COLOR_ATTACHMENT9* = 0x8CE9.GLenum
  GL_COLOR_ATTACHMENT10* = 0x8CEA.GLenum
  GL_COLOR_ATTACHMENT11* = 0x8CEB.GLenum
  GL_COLOR_ATTACHMENT12* = 0x8CEC.GLenum
  GL_COLOR_ATTACHMENT13* = 0x8CED.GLenum
  GL_COLOR_ATTACHMENT14* = 0x8CEE.GLenum
  GL_COLOR_ATTACHMENT15* = 0x8CEF.GLenum
  GL_COLOR_ATTACHMENT16* = 0x8CF0.GLenum
  GL_COLOR_ATTACHMENT17* = 0x8CF1.GLenum
  GL_COLOR_ATTACHMENT18* = 0x8CF2.GLenum
  GL_COLOR_ATTACHMENT19* = 0x8CF3.GLenum
  GL_COLOR_ATTACHMENT20* = 0x8CF4.GLenum
  GL_COLOR_ATTACHMENT21* = 0x8CF5.GLenum
  GL_COLOR_ATTACHMENT22* = 0x8CF6.GLenum
  GL_COLOR_ATTACHMENT23* = 0x8CF7.GLenum
  GL_COLOR_ATTACHMENT24* = 0x8CF8.GLenum
  GL_COLOR_ATTACHMENT25* = 0x8CF9.GLenum
  GL_COLOR_ATTACHMENT26* = 0x8CFA.GLenum
  GL_COLOR_ATTACHMENT27* = 0x8CFB.GLenum
  GL_COLOR_ATTACHMENT28* = 0x8CFC.GLenum
  GL_COLOR_ATTACHMENT29* = 0x8CFD.GLenum
  GL_COLOR_ATTACHMENT30* = 0x8CFE.GLenum
  GL_COLOR_ATTACHMENT31* = 0x8CFF.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE* = 0x8D56.GLenum
  GL_MAX_SAMPLES* = 0x8D57.GLenum
  GL_HALF_FLOAT* = 0x140B.GLenum
  GL_MAP_READ_BIT* = 0x0001.GLbitfield
  GL_MAP_WRITE_BIT* = 0x0002.GLbitfield
  GL_MAP_INVALIDATE_RANGE_BIT* = 0x0004.GLbitfield
  GL_MAP_INVALIDATE_BUFFER_BIT* = 0x0008.GLbitfield
  GL_MAP_FLUSH_EXPLICIT_BIT* = 0x0010.GLbitfield
  GL_MAP_UNSYNCHRONIZED_BIT* = 0x0020.GLbitfield
  GL_RG* = 0x8227.GLenum
  GL_RG_INTEGER* = 0x8228.GLenum
  GL_R8* = 0x8229.GLenum
  GL_RG8* = 0x822B.GLenum
  GL_R16F* = 0x822D.GLenum
  GL_R32F* = 0x822E.GLenum
  GL_RG16F* = 0x822F.GLenum
  GL_RG32F* = 0x8230.GLenum
  GL_R8I* = 0x8231.GLenum
  GL_R8UI* = 0x8232.GLenum
  GL_R16I* = 0x8233.GLenum
  GL_R16UI* = 0x8234.GLenum
  GL_R32I* = 0x8235.GLenum
  GL_R32UI* = 0x8236.GLenum
  GL_RG8I* = 0x8237.GLenum
  GL_RG8UI* = 0x8238.GLenum
  GL_RG16I* = 0x8239.GLenum
  GL_RG16UI* = 0x823A.GLenum
  GL_RG32I* = 0x823B.GLenum
  GL_RG32UI* = 0x823C.GLenum
  GL_VERTEX_ARRAY_BINDING* = 0x85B5.GLenum
  GL_R8_SNORM* = 0x8F94.GLenum
  GL_RG8_SNORM* = 0x8F95.GLenum
  GL_RGB8_SNORM* = 0x8F96.GLenum
  GL_RGBA8_SNORM* = 0x8F97.GLenum
  GL_SIGNED_NORMALIZED* = 0x8F9C.GLenum
  GL_PRIMITIVE_RESTART_FIXED_INDEX* = 0x8D69.GLenum
  GL_COPY_READ_BUFFER* = 0x8F36.GLenum
  GL_COPY_WRITE_BUFFER* = 0x8F37.GLenum
  GL_COPY_READ_BUFFER_BINDING* = 0x8F36.GLenum
  GL_COPY_WRITE_BUFFER_BINDING* = 0x8F37.GLenum
  GL_UNIFORM_BUFFER* = 0x8A11.GLenum
  GL_UNIFORM_BUFFER_BINDING* = 0x8A28.GLenum
  GL_UNIFORM_BUFFER_START* = 0x8A29.GLenum
  GL_UNIFORM_BUFFER_SIZE* = 0x8A2A.GLenum
  GL_MAX_VERTEX_UNIFORM_BLOCKS* = 0x8A2B.GLenum
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS* = 0x8A2D.GLenum
  GL_MAX_COMBINED_UNIFORM_BLOCKS* = 0x8A2E.GLenum
  GL_MAX_UNIFORM_BUFFER_BINDINGS* = 0x8A2F.GLenum
  GL_MAX_UNIFORM_BLOCK_SIZE* = 0x8A30.GLenum
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS* = 0x8A31.GLenum
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS* = 0x8A33.GLenum
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT* = 0x8A34.GLenum
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH* = 0x8A35.GLenum
  GL_ACTIVE_UNIFORM_BLOCKS* = 0x8A36.GLenum
  GL_UNIFORM_TYPE* = 0x8A37.GLenum
  GL_UNIFORM_SIZE* = 0x8A38.GLenum
  GL_UNIFORM_NAME_LENGTH* = 0x8A39.GLenum
  GL_UNIFORM_BLOCK_INDEX* = 0x8A3A.GLenum
  GL_UNIFORM_OFFSET* = 0x8A3B.GLenum
  GL_UNIFORM_ARRAY_STRIDE* = 0x8A3C.GLenum
  GL_UNIFORM_MATRIX_STRIDE* = 0x8A3D.GLenum
  GL_UNIFORM_IS_ROW_MAJOR* = 0x8A3E.GLenum
  GL_UNIFORM_BLOCK_BINDING* = 0x8A3F.GLenum
  GL_UNIFORM_BLOCK_DATA_SIZE* = 0x8A40.GLenum
  GL_UNIFORM_BLOCK_NAME_LENGTH* = 0x8A41.GLenum
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS* = 0x8A42.GLenum
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES* = 0x8A43.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER* = 0x8A44.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER* = 0x8A46.GLenum
  GL_MAX_VERTEX_OUTPUT_COMPONENTS* = 0x9122.GLenum
  GL_MAX_FRAGMENT_INPUT_COMPONENTS* = 0x9125.GLenum
  GL_MAX_SERVER_WAIT_TIMEOUT* = 0x9111.GLenum
  GL_OBJECT_TYPE* = 0x9112.GLenum
  GL_SYNC_CONDITION* = 0x9113.GLenum
  GL_SYNC_STATUS* = 0x9114.GLenum
  GL_SYNC_FLAGS* = 0x9115.GLenum
  GL_SYNC_FENCE* = 0x9116.GLenum
  GL_SYNC_GPU_COMMANDS_COMPLETE* = 0x9117.GLenum
  GL_UNSIGNALED* = 0x9118.GLenum
  GL_SIGNALED* = 0x9119.GLenum
  GL_ALREADY_SIGNALED* = 0x911A.GLenum
  GL_TIMEOUT_EXPIRED* = 0x911B.GLenum
  GL_CONDITION_SATISFIED* = 0x911C.GLenum
  GL_WAIT_FAILED* = 0x911D.GLenum
  GL_SYNC_FLUSH_COMMANDS_BIT* = 0x00000001.GLbitfield
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR* = 0x88FE.GLenum
  GL_ANY_SAMPLES_PASSED* = 0x8C2F.GLenum
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE* = 0x8D6A.GLenum
  GL_SAMPLER_BINDING* = 0x8919.GLenum
  GL_RGB10_A2UI* = 0x906F.GLenum
  GL_TEXTURE_SWIZZLE_R* = 0x8E42.GLenum
  GL_TEXTURE_SWIZZLE_G* = 0x8E43.GLenum
  GL_TEXTURE_SWIZZLE_B* = 0x8E44.GLenum
  GL_TEXTURE_SWIZZLE_A* = 0x8E45.GLenum
  GL_GREEN* = 0x1904.GLenum
  GL_BLUE* = 0x1905.GLenum
  GL_INT_2_10_10_10_REV* = 0x8D9F.GLenum
  GL_TRANSFORM_FEEDBACK* = 0x8E22.GLenum
  GL_TRANSFORM_FEEDBACK_PAUSED* = 0x8E23.GLenum
  GL_TRANSFORM_FEEDBACK_ACTIVE* = 0x8E24.GLenum
  GL_TRANSFORM_FEEDBACK_BINDING* = 0x8E25.GLenum
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT* = 0x8257.GLenum
  GL_PROGRAM_BINARY_LENGTH* = 0x8741.GLenum
  GL_NUM_PROGRAM_BINARY_FORMATS* = 0x87FE.GLenum
  GL_PROGRAM_BINARY_FORMATS* = 0x87FF.GLenum
  GL_COMPRESSED_R11_EAC* = 0x9270.GLenum
  GL_COMPRESSED_SIGNED_R11_EAC* = 0x9271.GLenum
  GL_COMPRESSED_RG11_EAC* = 0x9272.GLenum
  GL_COMPRESSED_SIGNED_RG11_EAC* = 0x9273.GLenum
  GL_COMPRESSED_RGB8_ETC2* = 0x9274.GLenum
  GL_COMPRESSED_SRGB8_ETC2* = 0x9275.GLenum
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2* = 0x9276.GLenum
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2* = 0x9277.GLenum
  GL_COMPRESSED_RGBA8_ETC2_EAC* = 0x9278.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC* = 0x9279.GLenum
  GL_TEXTURE_IMMUTABLE_FORMAT* = 0x912F.GLenum
  GL_MAX_ELEMENT_INDEX* = 0x8D6B.GLenum
  GL_NUM_SAMPLE_COUNTS* = 0x9380.GLenum
  GL_TEXTURE_IMMUTABLE_LEVELS* = 0x82DF.GLenum


# Functions
var
  GLAD_GL_ES_VERSION_2_0*: bool
  GLAD_GL_ES_VERSION_3_0*: bool

  glActiveTexture*: proc (texture: GLenum) {.stdcall.}
  glAttachShader*: proc (program: GLuint, shader: GLuint) {.stdcall.}
  glBindAttribLocation*: proc (program: GLuint, index: GLuint, name: cstring) {.stdcall.}
  glBindBuffer*: proc (target: GLenum, buffer: GLuint) {.stdcall.}
  glBindFramebuffer*: proc (target: GLenum, framebuffer: GLuint) {.stdcall.}
  glBindRenderbuffer*: proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}
  glBindTexture*: proc (target: GLenum, texture: GLuint) {.stdcall.}
  glBlendColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}
  glBlendEquation*: proc (mode: GLenum) {.stdcall.}
  glBlendEquationSeparate*: proc (modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}
  glBlendFunc*: proc (sfactor: GLenum, dfactor: GLenum) {.stdcall.}
  glBlendFuncSeparate*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}
  glBufferData*: proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}
  glBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glCheckFramebufferStatus*: proc (target: GLenum): GLenum {.stdcall.}
  glClear*: proc (mask: GLbitfield) {.stdcall.}
  glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}
  glClearDepthf*: proc (d: GLfloat) {.stdcall.}
  glClearStencil*: proc (s: GLint) {.stdcall.}
  glColorMask*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.stdcall.}
  glCompileShader*: proc (shader: GLuint) {.stdcall.}
  glCompressedTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCopyTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}
  glCopyTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glCreateProgram*: proc (): GLuint {.stdcall.}
  glCreateShader*: proc (`type`: GLenum): GLuint {.stdcall.}
  glCullFace*: proc (mode: GLenum) {.stdcall.}
  glDeleteBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glDeleteFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}
  glDeleteProgram*: proc (program: GLuint) {.stdcall.}
  glDeleteRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}
  glDeleteShader*: proc (shader: GLuint) {.stdcall.}
  glDeleteTextures*: proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}
  glDepthFunc*: proc (`func`: GLenum) {.stdcall.}
  glDepthMask*: proc (flag: GLboolean) {.stdcall.}
  glDepthRangef*: proc (n: GLfloat, f: GLfloat) {.stdcall.}
  glDetachShader*: proc (program: GLuint, shader: GLuint) {.stdcall.}
  glDisable*: proc (cap: GLenum) {.stdcall.}
  glDisableVertexAttribArray*: proc (index: GLuint) {.stdcall.}
  glDrawArrays*: proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}
  glDrawElements*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}
  glEnable*: proc (cap: GLenum) {.stdcall.}
  glEnableVertexAttribArray*: proc (index: GLuint) {.stdcall.}
  glFinish*: proc () {.stdcall.}
  glFlush*: proc () {.stdcall.}
  glFramebufferRenderbuffer*: proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}
  glFramebufferTexture2D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glFrontFace*: proc (mode: GLenum) {.stdcall.}
  glGenBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glGenerateMipmap*: proc (target: GLenum) {.stdcall.}
  glGenFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}
  glGenRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}
  glGenTextures*: proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}
  glGetActiveAttrib*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glGetActiveUniform*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glGetAttachedShaders*: proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.stdcall.}
  glGetAttribLocation*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glGetBooleanv*: proc (pname: GLenum, data: ptr GLboolean) {.stdcall.}
  glGetBufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetError*: proc (): GLenum {.stdcall.}
  glGetFloatv*: proc (pname: GLenum, data: ptr GLfloat) {.stdcall.}
  glGetFramebufferAttachmentParameteriv*: proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetIntegerv*: proc (pname: GLenum, data: ptr GLint) {.stdcall.}
  glGetProgramiv*: proc (program: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetProgramInfoLog*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}
  glGetRenderbufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetShaderiv*: proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetShaderInfoLog*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}
  glGetShaderPrecisionFormat*: proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.stdcall.}
  glGetShaderSource*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.stdcall.}
  glGetString*: proc (name: GLenum): ptr GLubyte {.stdcall.}
  glGetTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetUniformfv*: proc (program: GLuint, location: GLint, params: ptr GLfloat) {.stdcall.}
  glGetUniformiv*: proc (program: GLuint, location: GLint, params: ptr GLint) {.stdcall.}
  glGetUniformLocation*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glGetVertexAttribfv*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetVertexAttribiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribPointerv*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}
  glHint*: proc (target: GLenum, mode: GLenum) {.stdcall.}
  glIsBuffer*: proc (buffer: GLuint): GLboolean {.stdcall.}
  glIsEnabled*: proc (cap: GLenum): GLboolean {.stdcall.}
  glIsFramebuffer*: proc (framebuffer: GLuint): GLboolean {.stdcall.}
  glIsProgram*: proc (program: GLuint): GLboolean {.stdcall.}
  glIsRenderbuffer*: proc (renderbuffer: GLuint): GLboolean {.stdcall.}
  glIsShader*: proc (shader: GLuint): GLboolean {.stdcall.}
  glIsTexture*: proc (texture: GLuint): GLboolean {.stdcall.}
  glLineWidth*: proc (width: GLfloat) {.stdcall.}
  glLinkProgram*: proc (program: GLuint) {.stdcall.}
  glPixelStorei*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glPolygonOffset*: proc (factor: GLfloat, units: GLfloat) {.stdcall.}
  glReadPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glReleaseShaderCompiler*: proc () {.stdcall.}
  glRenderbufferStorage*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glSampleCoverage*: proc (value: GLfloat, invert: GLboolean) {.stdcall.}
  glScissor*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glShaderBinary*: proc (count: GLsizei, shaders: ptr GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}
  glShaderSource*: proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.stdcall.}
  glStencilFunc*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}
  glStencilFuncSeparate*: proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}
  glStencilMask*: proc (mask: GLuint) {.stdcall.}
  glStencilMaskSeparate*: proc (face: GLenum, mask: GLuint) {.stdcall.}
  glStencilOp*: proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.stdcall.}
  glStencilOpSeparate*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.stdcall.}
  glTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexParameterf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glTexParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glUniform1f*: proc (location: GLint, v0: GLfloat) {.stdcall.}
  glUniform1fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform1i*: proc (location: GLint, v0: GLint) {.stdcall.}
  glUniform1iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform2f*: proc (location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}
  glUniform2fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform2i*: proc (location: GLint, v0: GLint, v1: GLint) {.stdcall.}
  glUniform2iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform3f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}
  glUniform3fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform3i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}
  glUniform3iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform4f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}
  glUniform4fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform4i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}
  glUniform4iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniformMatrix2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUseProgram*: proc (program: GLuint) {.stdcall.}
  glValidateProgram*: proc (program: GLuint) {.stdcall.}
  glVertexAttrib1f*: proc (index: GLuint, x: GLfloat) {.stdcall.}
  glVertexAttrib1fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib2f*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}
  glVertexAttrib2fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib3f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glVertexAttrib3fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib4f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glVertexAttrib4fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttribPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.stdcall.}
  glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glReadBuffer*: proc (src: GLenum) {.stdcall.}
  glDrawRangeElements*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}
  glTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glCopyTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glCompressedTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glGenQueries*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glDeleteQueries*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glIsQuery*: proc (id: GLuint): GLboolean {.stdcall.}
  glBeginQuery*: proc (target: GLenum, id: GLuint) {.stdcall.}
  glEndQuery*: proc (target: GLenum) {.stdcall.}
  glGetQueryiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetQueryObjectuiv*: proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glUnmapBuffer*: proc (target: GLenum): GLboolean {.stdcall.}
  glGetBufferPointerv*: proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}
  glDrawBuffers*: proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}
  glUniformMatrix2x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix2x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glBlitFramebuffer*: proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}
  glRenderbufferStorageMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glFramebufferTextureLayer*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}
  glMapBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}
  glFlushMappedBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.stdcall.}
  glBindVertexArray*: proc (array: GLuint) {.stdcall.}
  glDeleteVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}
  glGenVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}
  glIsVertexArray*: proc (array: GLuint): GLboolean {.stdcall.}
  glGetIntegeri_v*: proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}
  glBeginTransformFeedback*: proc (primitiveMode: GLenum) {.stdcall.}
  glEndTransformFeedback*: proc () {.stdcall.}
  glBindBufferRange*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glBindBufferBase*: proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}
  glTransformFeedbackVaryings*: proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.stdcall.}
  glGetTransformFeedbackVarying*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glVertexAttribIPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glGetVertexAttribIiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribIuiv*: proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glVertexAttribI4i*: proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}
  glVertexAttribI4ui*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}
  glVertexAttribI4iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI4uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glGetUniformuiv*: proc (program: GLuint, location: GLint, params: ptr GLuint) {.stdcall.}
  glGetFragDataLocation*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glUniform1ui*: proc (location: GLint, v0: GLuint) {.stdcall.}
  glUniform2ui*: proc (location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}
  glUniform3ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}
  glUniform4ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}
  glUniform1uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform2uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform3uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform4uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glClearBufferiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.stdcall.}
  glClearBufferuiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.stdcall.}
  glClearBufferfv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.stdcall.}
  glClearBufferfi*: proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.stdcall.}
  glGetStringi*: proc (name: GLenum, index: GLuint): ptr GLubyte {.stdcall.}
  glCopyBufferSubData*: proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glGetUniformIndices*: proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.stdcall.}
  glGetActiveUniformsiv*: proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetUniformBlockIndex*: proc (program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}
  glGetActiveUniformBlockiv*: proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetActiveUniformBlockName*: proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.stdcall.}
  glUniformBlockBinding*: proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.stdcall.}
  glDrawArraysInstanced*: proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.stdcall.}
  glDrawElementsInstanced*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.stdcall.}
  glFenceSync*: proc (condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}
  glIsSync*: proc (sync: GLsync): GLboolean {.stdcall.}
  glDeleteSync*: proc (sync: GLsync) {.stdcall.}
  glClientWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}
  glWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.stdcall.}
  glGetInteger64v*: proc (pname: GLenum, data: ptr GLint64) {.stdcall.}
  glGetSynciv*: proc (sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.stdcall.}
  glGetInteger64i_v*: proc (target: GLenum, index: GLuint, data: ptr GLint64) {.stdcall.}
  glGetBufferParameteri64v*: proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.stdcall.}
  glGenSamplers*: proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}
  glDeleteSamplers*: proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}
  glIsSampler*: proc (sampler: GLuint): GLboolean {.stdcall.}
  glBindSampler*: proc (unit: GLuint, sampler: GLuint) {.stdcall.}
  glSamplerParameteri*: proc (sampler: GLuint, pname: GLenum, param: GLint) {.stdcall.}
  glSamplerParameteriv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glSamplerParameterf*: proc (sampler: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}
  glSamplerParameterfv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}
  glGetSamplerParameteriv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetSamplerParameterfv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glVertexAttribDivisor*: proc (index: GLuint, divisor: GLuint) {.stdcall.}
  glBindTransformFeedback*: proc (target: GLenum, id: GLuint) {.stdcall.}
  glDeleteTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glGenTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glIsTransformFeedback*: proc (id: GLuint): GLboolean {.stdcall.}
  glPauseTransformFeedback*: proc () {.stdcall.}
  glResumeTransformFeedback*: proc () {.stdcall.}
  glGetProgramBinary*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer) {.stdcall.}
  glProgramBinary*: proc (program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}
  glProgramParameteri*: proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}
  glInvalidateFramebuffer*: proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum) {.stdcall.}
  glInvalidateSubFramebuffer*: proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glTexStorage2D*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glTexStorage3D*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}
  glGetInternalformativ*: proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint) {.stdcall.}


# Extensions
var
  GLAD_GL_EXT_color_buffer_float*: bool

  GLAD_GL_EXT_color_buffer_half_float*: bool
  GL_RGBA16F_EXT* = 0x881A.GLenum
  GL_RGB16F_EXT* = 0x881B.GLenum
  GL_RG16F_EXT* = 0x822F.GLenum
  GL_R16F_EXT* = 0x822D.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT* = 0x8211.GLenum
  GL_UNSIGNED_NORMALIZED_EXT* = 0x8C17.GLenum



proc load_GL_ES_VERSION_2_0(load: proc) =
  if not GLAD_GL_ES_VERSION_2_0: return

  glActiveTexture = cast[proc (texture: GLenum) {.stdcall.}](load("glActiveTexture"))
  glAttachShader = cast[proc (program: GLuint, shader: GLuint) {.stdcall.}](load("glAttachShader"))
  glBindAttribLocation = cast[proc (program: GLuint, index: GLuint, name: cstring) {.stdcall.}](load("glBindAttribLocation"))
  glBindBuffer = cast[proc (target: GLenum, buffer: GLuint) {.stdcall.}](load("glBindBuffer"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.stdcall.}](load("glBindFramebuffer"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glBindRenderbuffer"))
  glBindTexture = cast[proc (target: GLenum, texture: GLuint) {.stdcall.}](load("glBindTexture"))
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.stdcall.}](load("glBlendEquation"))
  glBlendEquationSeparate = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}](load("glBlendEquationSeparate"))
  glBlendFunc = cast[proc (sfactor: GLenum, dfactor: GLenum) {.stdcall.}](load("glBlendFunc"))
  glBlendFuncSeparate = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}](load("glBlendFuncSeparate"))
  glBufferData = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}](load("glBufferData"))
  glBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glBufferSubData"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.stdcall.}](load("glCheckFramebufferStatus"))
  glClear = cast[proc (mask: GLbitfield) {.stdcall.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}](load("glClearColor"))
  glClearDepthf = cast[proc (d: GLfloat) {.stdcall.}](load("glClearDepthf"))
  glClearStencil = cast[proc (s: GLint) {.stdcall.}](load("glClearStencil"))
  glColorMask = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.stdcall.}](load("glColorMask"))
  glCompileShader = cast[proc (shader: GLuint) {.stdcall.}](load("glCompileShader"))
  glCompressedTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage2D"))
  glCompressedTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage2D"))
  glCopyTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}](load("glCopyTexImage2D"))
  glCopyTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTexSubImage2D"))
  glCreateProgram = cast[proc (): GLuint {.stdcall.}](load("glCreateProgram"))
  glCreateShader = cast[proc (`type`: GLenum): GLuint {.stdcall.}](load("glCreateShader"))
  glCullFace = cast[proc (mode: GLenum) {.stdcall.}](load("glCullFace"))
  glDeleteBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glDeleteBuffers"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glDeleteFramebuffers"))
  glDeleteProgram = cast[proc (program: GLuint) {.stdcall.}](load("glDeleteProgram"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glDeleteRenderbuffers"))
  glDeleteShader = cast[proc (shader: GLuint) {.stdcall.}](load("glDeleteShader"))
  glDeleteTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glDeleteTextures"))
  glDepthFunc = cast[proc (`func`: GLenum) {.stdcall.}](load("glDepthFunc"))
  glDepthMask = cast[proc (flag: GLboolean) {.stdcall.}](load("glDepthMask"))
  glDepthRangef = cast[proc (n: GLfloat, f: GLfloat) {.stdcall.}](load("glDepthRangef"))
  glDetachShader = cast[proc (program: GLuint, shader: GLuint) {.stdcall.}](load("glDetachShader"))
  glDisable = cast[proc (cap: GLenum) {.stdcall.}](load("glDisable"))
  glDisableVertexAttribArray = cast[proc (index: GLuint) {.stdcall.}](load("glDisableVertexAttribArray"))
  glDrawArrays = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}](load("glDrawArrays"))
  glDrawElements = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}](load("glDrawElements"))
  glEnable = cast[proc (cap: GLenum) {.stdcall.}](load("glEnable"))
  glEnableVertexAttribArray = cast[proc (index: GLuint) {.stdcall.}](load("glEnableVertexAttribArray"))
  glFinish = cast[proc () {.stdcall.}](load("glFinish"))
  glFlush = cast[proc () {.stdcall.}](load("glFlush"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glFramebufferRenderbuffer"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture2D"))
  glFrontFace = cast[proc (mode: GLenum) {.stdcall.}](load("glFrontFace"))
  glGenBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glGenBuffers"))
  glGenerateMipmap = cast[proc (target: GLenum) {.stdcall.}](load("glGenerateMipmap"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glGenFramebuffers"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glGenRenderbuffers"))
  glGenTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glGenTextures"))
  glGetActiveAttrib = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetActiveAttrib"))
  glGetActiveUniform = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.stdcall.}](load("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetAttribLocation"))
  glGetBooleanv = cast[proc (pname: GLenum, data: ptr GLboolean) {.stdcall.}](load("glGetBooleanv"))
  glGetBufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetBufferParameteriv"))
  glGetError = cast[proc (): GLenum {.stdcall.}](load("glGetError"))
  glGetFloatv = cast[proc (pname: GLenum, data: ptr GLfloat) {.stdcall.}](load("glGetFloatv"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFramebufferAttachmentParameteriv"))
  glGetIntegerv = cast[proc (pname: GLenum, data: ptr GLint) {.stdcall.}](load("glGetIntegerv"))
  glGetProgramiv = cast[proc (program: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramiv"))
  glGetProgramInfoLog = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetProgramInfoLog"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetRenderbufferParameteriv"))
  glGetShaderiv = cast[proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetShaderiv"))
  glGetShaderInfoLog = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetShaderInfoLog"))
  glGetShaderPrecisionFormat = cast[proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.stdcall.}](load("glGetShaderPrecisionFormat"))
  glGetShaderSource = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.stdcall.}](load("glGetShaderSource"))
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.stdcall.}](load("glGetString"))
  glGetTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTexParameteriv"))
  glGetUniformfv = cast[proc (program: GLuint, location: GLint, params: ptr GLfloat) {.stdcall.}](load("glGetUniformfv"))
  glGetUniformiv = cast[proc (program: GLuint, location: GLint, params: ptr GLint) {.stdcall.}](load("glGetUniformiv"))
  glGetUniformLocation = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetUniformLocation"))
  glGetVertexAttribfv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetVertexAttribfv"))
  glGetVertexAttribiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}](load("glGetVertexAttribPointerv"))
  glHint = cast[proc (target: GLenum, mode: GLenum) {.stdcall.}](load("glHint"))
  glIsBuffer = cast[proc (buffer: GLuint): GLboolean {.stdcall.}](load("glIsBuffer"))
  glIsEnabled = cast[proc (cap: GLenum): GLboolean {.stdcall.}](load("glIsEnabled"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.stdcall.}](load("glIsFramebuffer"))
  glIsProgram = cast[proc (program: GLuint): GLboolean {.stdcall.}](load("glIsProgram"))
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.stdcall.}](load("glIsRenderbuffer"))
  glIsShader = cast[proc (shader: GLuint): GLboolean {.stdcall.}](load("glIsShader"))
  glIsTexture = cast[proc (texture: GLuint): GLboolean {.stdcall.}](load("glIsTexture"))
  glLineWidth = cast[proc (width: GLfloat) {.stdcall.}](load("glLineWidth"))
  glLinkProgram = cast[proc (program: GLuint) {.stdcall.}](load("glLinkProgram"))
  glPixelStorei = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glPixelStorei"))
  glPolygonOffset = cast[proc (factor: GLfloat, units: GLfloat) {.stdcall.}](load("glPolygonOffset"))
  glReadPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glReadPixels"))
  glReleaseShaderCompiler = cast[proc () {.stdcall.}](load("glReleaseShaderCompiler"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorage"))
  glSampleCoverage = cast[proc (value: GLfloat, invert: GLboolean) {.stdcall.}](load("glSampleCoverage"))
  glScissor = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glScissor"))
  glShaderBinary = cast[proc (count: GLsizei, shaders: ptr GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}](load("glShaderBinary"))
  glShaderSource = cast[proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.stdcall.}](load("glShaderSource"))
  glStencilFunc = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}](load("glStencilFunc"))
  glStencilFuncSeparate = cast[proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}](load("glStencilFuncSeparate"))
  glStencilMask = cast[proc (mask: GLuint) {.stdcall.}](load("glStencilMask"))
  glStencilMaskSeparate = cast[proc (face: GLenum, mask: GLuint) {.stdcall.}](load("glStencilMaskSeparate"))
  glStencilOp = cast[proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.stdcall.}](load("glStencilOp"))
  glStencilOpSeparate = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.stdcall.}](load("glStencilOpSeparate"))
  glTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage2D"))
  glTexParameterf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glTexParameterf"))
  glTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glTexParameterfv"))
  glTexParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glTexParameteri"))
  glTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTexParameteriv"))
  glTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage2D"))
  glUniform1f = cast[proc (location: GLint, v0: GLfloat) {.stdcall.}](load("glUniform1f"))
  glUniform1fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform1fv"))
  glUniform1i = cast[proc (location: GLint, v0: GLint) {.stdcall.}](load("glUniform1i"))
  glUniform1iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform1iv"))
  glUniform2f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}](load("glUniform2f"))
  glUniform2fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform2fv"))
  glUniform2i = cast[proc (location: GLint, v0: GLint, v1: GLint) {.stdcall.}](load("glUniform2i"))
  glUniform2iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform2iv"))
  glUniform3f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}](load("glUniform3f"))
  glUniform3fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform3fv"))
  glUniform3i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}](load("glUniform3i"))
  glUniform3iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform3iv"))
  glUniform4f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}](load("glUniform4f"))
  glUniform4fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform4fv"))
  glUniform4i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}](load("glUniform4i"))
  glUniform4iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform4iv"))
  glUniformMatrix2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2fv"))
  glUniformMatrix3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3fv"))
  glUniformMatrix4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4fv"))
  glUseProgram = cast[proc (program: GLuint) {.stdcall.}](load("glUseProgram"))
  glValidateProgram = cast[proc (program: GLuint) {.stdcall.}](load("glValidateProgram"))
  glVertexAttrib1f = cast[proc (index: GLuint, x: GLfloat) {.stdcall.}](load("glVertexAttrib1f"))
  glVertexAttrib1fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib1fv"))
  glVertexAttrib2f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}](load("glVertexAttrib2f"))
  glVertexAttrib2fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib2fv"))
  glVertexAttrib3f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glVertexAttrib3f"))
  glVertexAttrib3fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib3fv"))
  glVertexAttrib4f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glVertexAttrib4f"))
  glVertexAttrib4fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib4fv"))
  glVertexAttribPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribPointer"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glViewport"))


proc load_GL_ES_VERSION_3_0(load: proc) =
  if not GLAD_GL_ES_VERSION_3_0: return

  glReadBuffer = cast[proc (src: GLenum) {.stdcall.}](load("glReadBuffer"))
  glDrawRangeElements = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}](load("glDrawRangeElements"))
  glTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage3D"))
  glTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage3D"))
  glCopyTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTexSubImage3D"))
  glCompressedTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage3D"))
  glCompressedTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage3D"))
  glGenQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenQueries"))
  glDeleteQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteQueries"))
  glIsQuery = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsQuery"))
  glBeginQuery = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBeginQuery"))
  glEndQuery = cast[proc (target: GLenum) {.stdcall.}](load("glEndQuery"))
  glGetQueryiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryiv"))
  glGetQueryObjectuiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetQueryObjectuiv"))
  glUnmapBuffer = cast[proc (target: GLenum): GLboolean {.stdcall.}](load("glUnmapBuffer"))
  glGetBufferPointerv = cast[proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetBufferPointerv"))
  glDrawBuffers = cast[proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}](load("glDrawBuffers"))
  glUniformMatrix2x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2x3fv"))
  glUniformMatrix3x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3x2fv"))
  glUniformMatrix2x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2x4fv"))
  glUniformMatrix4x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4x2fv"))
  glUniformMatrix3x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3x4fv"))
  glUniformMatrix4x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4x3fv"))
  glBlitFramebuffer = cast[proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}](load("glBlitFramebuffer"))
  glRenderbufferStorageMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorageMultisample"))
  glFramebufferTextureLayer = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glFramebufferTextureLayer"))
  glMapBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](load("glMapBufferRange"))
  glFlushMappedBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.stdcall.}](load("glFlushMappedBufferRange"))
  glBindVertexArray = cast[proc (array: GLuint) {.stdcall.}](load("glBindVertexArray"))
  glDeleteVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glDeleteVertexArrays"))
  glGenVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glGenVertexArrays"))
  glIsVertexArray = cast[proc (array: GLuint): GLboolean {.stdcall.}](load("glIsVertexArray"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}](load("glGetIntegeri_v"))
  glBeginTransformFeedback = cast[proc (primitiveMode: GLenum) {.stdcall.}](load("glBeginTransformFeedback"))
  glEndTransformFeedback = cast[proc () {.stdcall.}](load("glEndTransformFeedback"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}](load("glBindBufferBase"))
  glTransformFeedbackVaryings = cast[proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.stdcall.}](load("glTransformFeedbackVaryings"))
  glGetTransformFeedbackVarying = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetTransformFeedbackVarying"))
  glVertexAttribIPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribIPointer"))
  glGetVertexAttribIiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribIiv"))
  glGetVertexAttribIuiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetVertexAttribIuiv"))
  glVertexAttribI4i = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glVertexAttribI4i"))
  glVertexAttribI4ui = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}](load("glVertexAttribI4ui"))
  glVertexAttribI4iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI4iv"))
  glVertexAttribI4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI4uiv"))
  glGetUniformuiv = cast[proc (program: GLuint, location: GLint, params: ptr GLuint) {.stdcall.}](load("glGetUniformuiv"))
  glGetFragDataLocation = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetFragDataLocation"))
  glUniform1ui = cast[proc (location: GLint, v0: GLuint) {.stdcall.}](load("glUniform1ui"))
  glUniform2ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}](load("glUniform2ui"))
  glUniform3ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}](load("glUniform3ui"))
  glUniform4ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}](load("glUniform4ui"))
  glUniform1uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform1uiv"))
  glUniform2uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform2uiv"))
  glUniform3uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform3uiv"))
  glUniform4uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform4uiv"))
  glClearBufferiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.stdcall.}](load("glClearBufferiv"))
  glClearBufferuiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.stdcall.}](load("glClearBufferuiv"))
  glClearBufferfv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.stdcall.}](load("glClearBufferfv"))
  glClearBufferfi = cast[proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.stdcall.}](load("glClearBufferfi"))
  glGetStringi = cast[proc (name: GLenum, index: GLuint): ptr GLubyte {.stdcall.}](load("glGetStringi"))
  glCopyBufferSubData = cast[proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glCopyBufferSubData"))
  glGetUniformIndices = cast[proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.stdcall.}](load("glGetUniformIndices"))
  glGetActiveUniformsiv = cast[proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveUniformsiv"))
  glGetUniformBlockIndex = cast[proc (program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}](load("glGetUniformBlockIndex"))
  glGetActiveUniformBlockiv = cast[proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveUniformBlockiv"))
  glGetActiveUniformBlockName = cast[proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.stdcall.}](load("glGetActiveUniformBlockName"))
  glUniformBlockBinding = cast[proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.stdcall.}](load("glUniformBlockBinding"))
  glDrawArraysInstanced = cast[proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.stdcall.}](load("glDrawArraysInstanced"))
  glDrawElementsInstanced = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.stdcall.}](load("glDrawElementsInstanced"))
  glFenceSync = cast[proc (condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}](load("glFenceSync"))
  glIsSync = cast[proc (sync: GLsync): GLboolean {.stdcall.}](load("glIsSync"))
  glDeleteSync = cast[proc (sync: GLsync) {.stdcall.}](load("glDeleteSync"))
  glClientWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}](load("glClientWaitSync"))
  glWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.stdcall.}](load("glWaitSync"))
  glGetInteger64v = cast[proc (pname: GLenum, data: ptr GLint64) {.stdcall.}](load("glGetInteger64v"))
  glGetSynciv = cast[proc (sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.stdcall.}](load("glGetSynciv"))
  glGetInteger64i_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint64) {.stdcall.}](load("glGetInteger64i_v"))
  glGetBufferParameteri64v = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glGetBufferParameteri64v"))
  glGenSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glGenSamplers"))
  glDeleteSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glDeleteSamplers"))
  glIsSampler = cast[proc (sampler: GLuint): GLboolean {.stdcall.}](load("glIsSampler"))
  glBindSampler = cast[proc (unit: GLuint, sampler: GLuint) {.stdcall.}](load("glBindSampler"))
  glSamplerParameteri = cast[proc (sampler: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glSamplerParameteri"))
  glSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glSamplerParameteriv"))
  glSamplerParameterf = cast[proc (sampler: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}](load("glSamplerParameterf"))
  glSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}](load("glSamplerParameterfv"))
  glGetSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetSamplerParameteriv"))
  glGetSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetSamplerParameterfv"))
  glVertexAttribDivisor = cast[proc (index: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexAttribDivisor"))
  glBindTransformFeedback = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBindTransformFeedback"))
  glDeleteTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteTransformFeedbacks"))
  glGenTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenTransformFeedbacks"))
  glIsTransformFeedback = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsTransformFeedback"))
  glPauseTransformFeedback = cast[proc () {.stdcall.}](load("glPauseTransformFeedback"))
  glResumeTransformFeedback = cast[proc () {.stdcall.}](load("glResumeTransformFeedback"))
  glGetProgramBinary = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer) {.stdcall.}](load("glGetProgramBinary"))
  glProgramBinary = cast[proc (program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}](load("glProgramBinary"))
  glProgramParameteri = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteri"))
  glInvalidateFramebuffer = cast[proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum) {.stdcall.}](load("glInvalidateFramebuffer"))
  glInvalidateSubFramebuffer = cast[proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glInvalidateSubFramebuffer"))
  glTexStorage2D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glTexStorage2D"))
  glTexStorage3D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glTexStorage3D"))
  glGetInternalformativ = cast[proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint) {.stdcall.}](load("glGetInternalformativ"))


proc hasExt(extname: string): bool =
  if extname.len == 0:
    return false
  if glVersionMajor < 3:
    var extensions = $cast[cstring](glGetString(GL_EXTENSIONS))
    if extensions.len == 0:
      return false
    var
      loc, terminatorLoc: int
      terminator: char
    while true:
      loc = extensions.find(extname)
      if loc < 0:
        return false
      terminatorLoc = loc + extname.len
      terminator = extensions[terminatorLoc]
      if (loc == 0 or extensions[loc - 1] == ' ') and
         (terminator == ' ' or terminator == '\0'):
        return true
      extensions = extensions[terminatorLoc..^1]
  else:
    var
      num: GLint
      s: cstring
    glGetIntegerv(GL_NUM_EXTENSIONS, num.addr)
    for i in 0..num-1:
      s = cast[cstring](glGetStringi(GL_EXTENSIONS, GLuint(i)))
      if s == extname:
        return true


proc findExtensionsGLES2() =
  GLAD_GL_EXT_color_buffer_float = hasExt("GL_EXT_color_buffer_float")
  GLAD_GL_EXT_color_buffer_half_float = hasExt("GL_EXT_color_buffer_half_float")
  discard


proc findCoreGLES2(glVersion: string) =
  # Thank you @elmindreda
  # https://github.com/elmindreda/greg/blob/master/templates/greg.c.in#L176
  # https://github.com/glfw/glfw/blob/master/src/context.c#L36
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(glVersion[0]) - ord('0')
  var minor = ord(glVersion[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_ES_VERSION_2_0 = (major == 2 and minor >= 0) or major > 2
  GLAD_GL_ES_VERSION_3_0 = (major == 3 and minor >= 0) or major > 3


proc gladLoadGLES2*(load: proc): bool =
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.stdcall.}](load("glGetString"))
  if glGetString == nil: return false

  var glVersion = cast[cstring](glGetString(GL_VERSION))
  if glVersion == nil: return false

  findCoreGLES2($glVersion)

  load_GL_ES_VERSION_2_0(load)
  load_GL_ES_VERSION_3_0(load)

  findExtensionsGLES2()


  return glVersionMajor != 0 or glVersionMinor != 0

